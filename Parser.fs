// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


let (++) (str1: string) (str2: string) = str1 + "\n" + str2

let boilerplate = 
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "// Start of Boilerplate" ++
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "let" ++
    "    Usagi_Nakamura.Curry = (f as function) =>" ++
    "        let" ++
    "            arity = Record.FieldCount(Type.FunctionParameters(Value.Type(f)))," ++
    "            ApplyTo =" ++
    "                (args as list) =>" ++
    "                    if List.Count(args) >= arity then" ++
    "                        Function.Invoke(f, args)" ++
    "                    else" ++
    "                        (x as any) =>" ++
    "                        if List.Count(args) = arity - 1" ++
    "                        then @ApplyTo({x} & args)" ++
    "                        else @ApplyTo(args & {x})" ++
    "    in" ++
    "        ApplyTo({})" ++
    "in" ++
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "// End of Boilerplate" ++
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "\n\n"    


# 37 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE of (string)
  | HASH_SHARED of (string)
  | HASH_TABLE of (string)
  | HASH_TIME of (string)
  | HASH_DURATION of (string)
  | HASH_INFINITY of (string)
  | HASH_NAN of (string)
  | HASH_SECTION of (string)
  | HASH_BINARY of (string)
  | HASH_DATE of (string)
  | HASH_DATETIME of (string)
  | HASH_DATETIMEZONE of (string)
  | NULL of (string)
  | NULLABLE of (string)
  | OPTIONAL of (string)
  | OR of (string)
  | OTHERWISE of (string)
  | SECTION of (string)
  | SHARED of (string)
  | THEN of (string)
  | TRUE of (string)
  | TRY of (string)
  | TYPE of (string)
  | AND of (string)
  | EACH of (string)
  | ELSE of (string)
  | ERROR of (string)
  | AS of (string)
  | FALSE of (string)
  | IF of (string)
  | IN of (string)
  | IS of (string)
  | LET of (string)
  | META of (string)
  | NOT of (string)
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR of (string)
  | FUNCTION_OPERATOR of (string)
  | DOTDOT of (string)
  | OPENING_PARENTHESIS of (string)
  | CLOSING_PARENTHESIS of (string)
  | OPENING_BRACE of (string)
  | CLOSING_BRACE of (string)
  | COMMA of (string)
  | FORWARD_PIPELINE_OPERATOR of (string)
  | EQ of (string)
  | NE of (string)
  | RELATIONAL_OPERATOR of (string)
  | ADDITIVE_OPERATOR of (string)
  | MULTIPLICATIVE_OPERATOR of (string)
  | EOF
  | IDENTIFIER_WITH_PRIME of (string)
  | IDENTIFIER of (string)
  | APPLICATION of (string)
  | WHITESPACE of (string)
  | LITERAL of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE
    | TOKEN_HASH_SHARED
    | TOKEN_HASH_TABLE
    | TOKEN_HASH_TIME
    | TOKEN_HASH_DURATION
    | TOKEN_HASH_INFINITY
    | TOKEN_HASH_NAN
    | TOKEN_HASH_SECTION
    | TOKEN_HASH_BINARY
    | TOKEN_HASH_DATE
    | TOKEN_HASH_DATETIME
    | TOKEN_HASH_DATETIMEZONE
    | TOKEN_NULL
    | TOKEN_NULLABLE
    | TOKEN_OPTIONAL
    | TOKEN_OR
    | TOKEN_OTHERWISE
    | TOKEN_SECTION
    | TOKEN_SHARED
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_TRY
    | TOKEN_TYPE
    | TOKEN_AND
    | TOKEN_EACH
    | TOKEN_ELSE
    | TOKEN_ERROR
    | TOKEN_AS
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_IS
    | TOKEN_LET
    | TOKEN_META
    | TOKEN_NOT
    | TOKEN_CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR
    | TOKEN_FUNCTION_OPERATOR
    | TOKEN_DOTDOT
    | TOKEN_OPENING_PARENTHESIS
    | TOKEN_CLOSING_PARENTHESIS
    | TOKEN_OPENING_BRACE
    | TOKEN_CLOSING_BRACE
    | TOKEN_COMMA
    | TOKEN_FORWARD_PIPELINE_OPERATOR
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_RELATIONAL_OPERATOR
    | TOKEN_ADDITIVE_OPERATOR
    | TOKEN_MULTIPLICATIVE_OPERATOR
    | TOKEN_EOF
    | TOKEN_IDENTIFIER_WITH_PRIME
    | TOKEN_IDENTIFIER
    | TOKEN_APPLICATION
    | TOKEN_WHITESPACE
    | TOKEN_LITERAL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startparse
    | NONTERM_parse
    | NONTERM_expression
    | NONTERM_logical_or_expression
    | NONTERM_logical_and_expression
    | NONTERM_is_expression
    | NONTERM_as_expression
    | NONTERM_equality_expression
    | NONTERM_relational_expression
    | NONTERM_additive_expression
    | NONTERM_multiplicative_expression
    | NONTERM_primary_expression
    | NONTERM_literal_expression
    | NONTERM_identifier_expression
    | NONTERM_invoke_expression
    | NONTERM_forward_pipeline_expression
    | NONTERM_parenthesized_expression
    | NONTERM_list_expression
    | NONTERM_item_list
    | NONTERM_item_list_opt
    | NONTERM_item
    | NONTERM_function_expression
    | NONTERM_function_body
    | NONTERM_parameter_list
    | NONTERM_parameter_list_opt
    | NONTERM_fixed_parameter_list
    | NONTERM_optional_parameter_list
    | NONTERM_optional_parameter
    | NONTERM_parameter
    | NONTERM_return_type_opt
    | NONTERM_parameter_type_opt
    | NONTERM_assertion
    | NONTERM_nullable_primitive_type
    | NONTERM_nullable_opt
    | NONTERM_primitive_type
    | NONTERM_let_expression
    | NONTERM_variable_list
    | NONTERM_variable
    | NONTERM_variable_name

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE _ -> 0 
  | HASH_SHARED _ -> 1 
  | HASH_TABLE _ -> 2 
  | HASH_TIME _ -> 3 
  | HASH_DURATION _ -> 4 
  | HASH_INFINITY _ -> 5 
  | HASH_NAN _ -> 6 
  | HASH_SECTION _ -> 7 
  | HASH_BINARY _ -> 8 
  | HASH_DATE _ -> 9 
  | HASH_DATETIME _ -> 10 
  | HASH_DATETIMEZONE _ -> 11 
  | NULL _ -> 12 
  | NULLABLE _ -> 13 
  | OPTIONAL _ -> 14 
  | OR _ -> 15 
  | OTHERWISE _ -> 16 
  | SECTION _ -> 17 
  | SHARED _ -> 18 
  | THEN _ -> 19 
  | TRUE _ -> 20 
  | TRY _ -> 21 
  | TYPE _ -> 22 
  | AND _ -> 23 
  | EACH _ -> 24 
  | ELSE _ -> 25 
  | ERROR _ -> 26 
  | AS _ -> 27 
  | FALSE _ -> 28 
  | IF _ -> 29 
  | IN _ -> 30 
  | IS _ -> 31 
  | LET _ -> 32 
  | META _ -> 33 
  | NOT _ -> 34 
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR _ -> 35 
  | FUNCTION_OPERATOR _ -> 36 
  | DOTDOT _ -> 37 
  | OPENING_PARENTHESIS _ -> 38 
  | CLOSING_PARENTHESIS _ -> 39 
  | OPENING_BRACE _ -> 40 
  | CLOSING_BRACE _ -> 41 
  | COMMA _ -> 42 
  | FORWARD_PIPELINE_OPERATOR _ -> 43 
  | EQ _ -> 44 
  | NE _ -> 45 
  | RELATIONAL_OPERATOR _ -> 46 
  | ADDITIVE_OPERATOR _ -> 47 
  | MULTIPLICATIVE_OPERATOR _ -> 48 
  | EOF  -> 49 
  | IDENTIFIER_WITH_PRIME _ -> 50 
  | IDENTIFIER _ -> 51 
  | APPLICATION _ -> 52 
  | WHITESPACE _ -> 53 
  | LITERAL _ -> 54 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE 
  | 1 -> TOKEN_HASH_SHARED 
  | 2 -> TOKEN_HASH_TABLE 
  | 3 -> TOKEN_HASH_TIME 
  | 4 -> TOKEN_HASH_DURATION 
  | 5 -> TOKEN_HASH_INFINITY 
  | 6 -> TOKEN_HASH_NAN 
  | 7 -> TOKEN_HASH_SECTION 
  | 8 -> TOKEN_HASH_BINARY 
  | 9 -> TOKEN_HASH_DATE 
  | 10 -> TOKEN_HASH_DATETIME 
  | 11 -> TOKEN_HASH_DATETIMEZONE 
  | 12 -> TOKEN_NULL 
  | 13 -> TOKEN_NULLABLE 
  | 14 -> TOKEN_OPTIONAL 
  | 15 -> TOKEN_OR 
  | 16 -> TOKEN_OTHERWISE 
  | 17 -> TOKEN_SECTION 
  | 18 -> TOKEN_SHARED 
  | 19 -> TOKEN_THEN 
  | 20 -> TOKEN_TRUE 
  | 21 -> TOKEN_TRY 
  | 22 -> TOKEN_TYPE 
  | 23 -> TOKEN_AND 
  | 24 -> TOKEN_EACH 
  | 25 -> TOKEN_ELSE 
  | 26 -> TOKEN_ERROR 
  | 27 -> TOKEN_AS 
  | 28 -> TOKEN_FALSE 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_IN 
  | 31 -> TOKEN_IS 
  | 32 -> TOKEN_LET 
  | 33 -> TOKEN_META 
  | 34 -> TOKEN_NOT 
  | 35 -> TOKEN_CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR 
  | 36 -> TOKEN_FUNCTION_OPERATOR 
  | 37 -> TOKEN_DOTDOT 
  | 38 -> TOKEN_OPENING_PARENTHESIS 
  | 39 -> TOKEN_CLOSING_PARENTHESIS 
  | 40 -> TOKEN_OPENING_BRACE 
  | 41 -> TOKEN_CLOSING_BRACE 
  | 42 -> TOKEN_COMMA 
  | 43 -> TOKEN_FORWARD_PIPELINE_OPERATOR 
  | 44 -> TOKEN_EQ 
  | 45 -> TOKEN_NE 
  | 46 -> TOKEN_RELATIONAL_OPERATOR 
  | 47 -> TOKEN_ADDITIVE_OPERATOR 
  | 48 -> TOKEN_MULTIPLICATIVE_OPERATOR 
  | 49 -> TOKEN_EOF 
  | 50 -> TOKEN_IDENTIFIER_WITH_PRIME 
  | 51 -> TOKEN_IDENTIFIER 
  | 52 -> TOKEN_APPLICATION 
  | 53 -> TOKEN_WHITESPACE 
  | 54 -> TOKEN_LITERAL 
  | 57 -> TOKEN_end_of_input
  | 55 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startparse 
    | 1 -> NONTERM_parse 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_logical_or_expression 
    | 6 -> NONTERM_logical_or_expression 
    | 7 -> NONTERM_logical_and_expression 
    | 8 -> NONTERM_logical_and_expression 
    | 9 -> NONTERM_is_expression 
    | 10 -> NONTERM_is_expression 
    | 11 -> NONTERM_as_expression 
    | 12 -> NONTERM_as_expression 
    | 13 -> NONTERM_equality_expression 
    | 14 -> NONTERM_equality_expression 
    | 15 -> NONTERM_equality_expression 
    | 16 -> NONTERM_relational_expression 
    | 17 -> NONTERM_relational_expression 
    | 18 -> NONTERM_additive_expression 
    | 19 -> NONTERM_additive_expression 
    | 20 -> NONTERM_multiplicative_expression 
    | 21 -> NONTERM_multiplicative_expression 
    | 22 -> NONTERM_primary_expression 
    | 23 -> NONTERM_primary_expression 
    | 24 -> NONTERM_primary_expression 
    | 25 -> NONTERM_primary_expression 
    | 26 -> NONTERM_primary_expression 
    | 27 -> NONTERM_primary_expression 
    | 28 -> NONTERM_literal_expression 
    | 29 -> NONTERM_identifier_expression 
    | 30 -> NONTERM_identifier_expression 
    | 31 -> NONTERM_invoke_expression 
    | 32 -> NONTERM_forward_pipeline_expression 
    | 33 -> NONTERM_parenthesized_expression 
    | 34 -> NONTERM_list_expression 
    | 35 -> NONTERM_item_list 
    | 36 -> NONTERM_item_list 
    | 37 -> NONTERM_item_list_opt 
    | 38 -> NONTERM_item_list_opt 
    | 39 -> NONTERM_item 
    | 40 -> NONTERM_item 
    | 41 -> NONTERM_function_expression 
    | 42 -> NONTERM_function_body 
    | 43 -> NONTERM_parameter_list 
    | 44 -> NONTERM_parameter_list 
    | 45 -> NONTERM_parameter_list_opt 
    | 46 -> NONTERM_parameter_list_opt 
    | 47 -> NONTERM_fixed_parameter_list 
    | 48 -> NONTERM_fixed_parameter_list 
    | 49 -> NONTERM_optional_parameter_list 
    | 50 -> NONTERM_optional_parameter_list 
    | 51 -> NONTERM_optional_parameter 
    | 52 -> NONTERM_parameter 
    | 53 -> NONTERM_return_type_opt 
    | 54 -> NONTERM_return_type_opt 
    | 55 -> NONTERM_parameter_type_opt 
    | 56 -> NONTERM_parameter_type_opt 
    | 57 -> NONTERM_assertion 
    | 58 -> NONTERM_nullable_primitive_type 
    | 59 -> NONTERM_nullable_opt 
    | 60 -> NONTERM_nullable_opt 
    | 61 -> NONTERM_primitive_type 
    | 62 -> NONTERM_let_expression 
    | 63 -> NONTERM_variable_list 
    | 64 -> NONTERM_variable_list 
    | 65 -> NONTERM_variable 
    | 66 -> NONTERM_variable_name 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 57 
let _fsyacc_tagOfErrorTerminal = 55

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE _ -> "PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE" 
  | HASH_SHARED _ -> "HASH_SHARED" 
  | HASH_TABLE _ -> "HASH_TABLE" 
  | HASH_TIME _ -> "HASH_TIME" 
  | HASH_DURATION _ -> "HASH_DURATION" 
  | HASH_INFINITY _ -> "HASH_INFINITY" 
  | HASH_NAN _ -> "HASH_NAN" 
  | HASH_SECTION _ -> "HASH_SECTION" 
  | HASH_BINARY _ -> "HASH_BINARY" 
  | HASH_DATE _ -> "HASH_DATE" 
  | HASH_DATETIME _ -> "HASH_DATETIME" 
  | HASH_DATETIMEZONE _ -> "HASH_DATETIMEZONE" 
  | NULL _ -> "NULL" 
  | NULLABLE _ -> "NULLABLE" 
  | OPTIONAL _ -> "OPTIONAL" 
  | OR _ -> "OR" 
  | OTHERWISE _ -> "OTHERWISE" 
  | SECTION _ -> "SECTION" 
  | SHARED _ -> "SHARED" 
  | THEN _ -> "THEN" 
  | TRUE _ -> "TRUE" 
  | TRY _ -> "TRY" 
  | TYPE _ -> "TYPE" 
  | AND _ -> "AND" 
  | EACH _ -> "EACH" 
  | ELSE _ -> "ELSE" 
  | ERROR _ -> "ERROR" 
  | AS _ -> "AS" 
  | FALSE _ -> "FALSE" 
  | IF _ -> "IF" 
  | IN _ -> "IN" 
  | IS _ -> "IS" 
  | LET _ -> "LET" 
  | META _ -> "META" 
  | NOT _ -> "NOT" 
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR _ -> "CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR" 
  | FUNCTION_OPERATOR _ -> "FUNCTION_OPERATOR" 
  | DOTDOT _ -> "DOTDOT" 
  | OPENING_PARENTHESIS _ -> "OPENING_PARENTHESIS" 
  | CLOSING_PARENTHESIS _ -> "CLOSING_PARENTHESIS" 
  | OPENING_BRACE _ -> "OPENING_BRACE" 
  | CLOSING_BRACE _ -> "CLOSING_BRACE" 
  | COMMA _ -> "COMMA" 
  | FORWARD_PIPELINE_OPERATOR _ -> "FORWARD_PIPELINE_OPERATOR" 
  | EQ _ -> "EQ" 
  | NE _ -> "NE" 
  | RELATIONAL_OPERATOR _ -> "RELATIONAL_OPERATOR" 
  | ADDITIVE_OPERATOR _ -> "ADDITIVE_OPERATOR" 
  | MULTIPLICATIVE_OPERATOR _ -> "MULTIPLICATIVE_OPERATOR" 
  | EOF  -> "EOF" 
  | IDENTIFIER_WITH_PRIME _ -> "IDENTIFIER_WITH_PRIME" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | APPLICATION _ -> "APPLICATION" 
  | WHITESPACE _ -> "WHITESPACE" 
  | LITERAL _ -> "LITERAL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_SHARED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_TABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_TIME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DURATION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_INFINITY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_NAN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_SECTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_BINARY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DATE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DATETIME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DATETIMEZONE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NULL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NULLABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPTIONAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OTHERWISE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SECTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SHARED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EACH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ERROR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | META _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUNCTION_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOTDOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPENING_PARENTHESIS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CLOSING_PARENTHESIS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPENING_BRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CLOSING_BRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FORWARD_PIPELINE_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RELATIONAL_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ADDITIVE_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MULTIPLICATIVE_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | IDENTIFIER_WITH_PRIME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | APPLICATION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WHITESPACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 17us; 65535us; 0us; 2us; 9us; 44us; 12us; 44us; 23us; 44us; 24us; 44us; 27us; 44us; 30us; 44us; 32us; 44us; 52us; 43us; 53us; 45us; 54us; 46us; 56us; 47us; 60us; 47us; 63us; 48us; 65us; 49us; 90us; 50us; 95us; 51us; 17us; 65535us; 0us; 4us; 9us; 5us; 12us; 4us; 23us; 4us; 24us; 4us; 27us; 4us; 30us; 4us; 32us; 4us; 52us; 4us; 53us; 4us; 54us; 4us; 56us; 4us; 60us; 4us; 63us; 4us; 65us; 4us; 90us; 4us; 95us; 4us; 17us; 65535us; 0us; 8us; 9us; 8us; 12us; 8us; 23us; 8us; 24us; 8us; 27us; 8us; 30us; 8us; 32us; 8us; 52us; 8us; 53us; 8us; 54us; 8us; 56us; 8us; 60us; 8us; 63us; 8us; 65us; 8us; 90us; 8us; 95us; 8us; 17us; 65535us; 0us; 11us; 9us; 11us; 12us; 10us; 23us; 11us; 24us; 11us; 27us; 11us; 30us; 11us; 32us; 11us; 52us; 11us; 53us; 11us; 54us; 11us; 56us; 11us; 60us; 11us; 63us; 11us; 65us; 11us; 90us; 11us; 95us; 11us; 17us; 65535us; 0us; 13us; 9us; 13us; 12us; 13us; 23us; 13us; 24us; 13us; 27us; 13us; 30us; 13us; 32us; 13us; 52us; 13us; 53us; 13us; 54us; 13us; 56us; 13us; 60us; 13us; 63us; 13us; 65us; 13us; 90us; 13us; 95us; 13us; 17us; 65535us; 0us; 16us; 9us; 16us; 12us; 16us; 23us; 17us; 24us; 18us; 27us; 16us; 30us; 16us; 32us; 16us; 52us; 16us; 53us; 16us; 54us; 16us; 56us; 16us; 60us; 16us; 63us; 16us; 65us; 16us; 90us; 16us; 95us; 16us; 17us; 65535us; 0us; 21us; 9us; 21us; 12us; 21us; 23us; 21us; 24us; 21us; 27us; 22us; 30us; 21us; 32us; 21us; 52us; 21us; 53us; 21us; 54us; 21us; 56us; 21us; 60us; 21us; 63us; 21us; 65us; 21us; 90us; 21us; 95us; 21us; 17us; 65535us; 0us; 25us; 9us; 25us; 12us; 25us; 23us; 25us; 24us; 25us; 27us; 25us; 30us; 26us; 32us; 25us; 52us; 25us; 53us; 25us; 54us; 25us; 56us; 25us; 60us; 25us; 63us; 25us; 65us; 25us; 90us; 25us; 95us; 25us; 17us; 65535us; 0us; 28us; 9us; 28us; 12us; 28us; 23us; 28us; 24us; 28us; 27us; 28us; 30us; 28us; 32us; 29us; 52us; 28us; 53us; 28us; 54us; 28us; 56us; 28us; 60us; 28us; 63us; 28us; 65us; 28us; 90us; 28us; 95us; 28us; 17us; 65535us; 0us; 31us; 9us; 31us; 12us; 31us; 23us; 31us; 24us; 31us; 27us; 31us; 30us; 31us; 32us; 31us; 52us; 31us; 53us; 31us; 54us; 31us; 56us; 31us; 60us; 31us; 63us; 31us; 65us; 31us; 90us; 31us; 95us; 31us; 17us; 65535us; 0us; 33us; 9us; 33us; 12us; 33us; 23us; 33us; 24us; 33us; 27us; 33us; 30us; 33us; 32us; 33us; 52us; 33us; 53us; 33us; 54us; 33us; 56us; 33us; 60us; 33us; 63us; 33us; 65us; 33us; 90us; 33us; 95us; 33us; 17us; 65535us; 0us; 34us; 9us; 34us; 12us; 34us; 23us; 34us; 24us; 34us; 27us; 34us; 30us; 34us; 32us; 34us; 52us; 34us; 53us; 34us; 54us; 34us; 56us; 34us; 60us; 34us; 63us; 34us; 65us; 34us; 90us; 34us; 95us; 34us; 17us; 65535us; 0us; 35us; 9us; 35us; 12us; 35us; 23us; 35us; 24us; 35us; 27us; 35us; 30us; 35us; 32us; 35us; 52us; 35us; 53us; 35us; 54us; 35us; 56us; 35us; 60us; 35us; 63us; 35us; 65us; 35us; 90us; 35us; 95us; 35us; 17us; 65535us; 0us; 36us; 9us; 36us; 12us; 36us; 23us; 36us; 24us; 36us; 27us; 36us; 30us; 36us; 32us; 36us; 52us; 36us; 53us; 36us; 54us; 36us; 56us; 36us; 60us; 36us; 63us; 36us; 65us; 36us; 90us; 36us; 95us; 36us; 17us; 65535us; 0us; 37us; 9us; 37us; 12us; 37us; 23us; 37us; 24us; 37us; 27us; 37us; 30us; 37us; 32us; 37us; 52us; 37us; 53us; 37us; 54us; 37us; 56us; 37us; 60us; 37us; 63us; 37us; 65us; 37us; 90us; 37us; 95us; 37us; 17us; 65535us; 0us; 38us; 9us; 38us; 12us; 38us; 23us; 38us; 24us; 38us; 27us; 38us; 30us; 38us; 32us; 38us; 52us; 38us; 53us; 38us; 54us; 38us; 56us; 38us; 60us; 38us; 63us; 38us; 65us; 38us; 90us; 38us; 95us; 38us; 2us; 65535us; 56us; 62us; 60us; 61us; 1us; 65535us; 56us; 57us; 2us; 65535us; 56us; 59us; 60us; 59us; 17us; 65535us; 0us; 6us; 9us; 6us; 12us; 6us; 23us; 6us; 24us; 6us; 27us; 6us; 30us; 6us; 32us; 6us; 52us; 6us; 53us; 6us; 54us; 6us; 56us; 6us; 60us; 6us; 63us; 6us; 65us; 6us; 90us; 6us; 95us; 6us; 1us; 65535us; 65us; 66us; 1us; 65535us; 54us; 70us; 1us; 65535us; 54us; 64us; 2us; 65535us; 54us; 67us; 72us; 73us; 2us; 65535us; 68us; 69us; 75us; 76us; 2us; 65535us; 68us; 74us; 75us; 74us; 3us; 65535us; 54us; 71us; 72us; 71us; 77us; 78us; 0us; 65535us; 2us; 65535us; 41us; 80us; 79us; 80us; 2us; 65535us; 41us; 81us; 79us; 81us; 3us; 65535us; 14us; 15us; 19us; 20us; 82us; 83us; 3us; 65535us; 14us; 84us; 19us; 84us; 82us; 84us; 1us; 65535us; 84us; 85us; 17us; 65535us; 0us; 7us; 9us; 7us; 12us; 7us; 23us; 7us; 24us; 7us; 27us; 7us; 30us; 7us; 32us; 7us; 52us; 7us; 53us; 7us; 54us; 7us; 56us; 7us; 60us; 7us; 63us; 7us; 65us; 7us; 90us; 7us; 95us; 7us; 2us; 65535us; 88us; 89us; 92us; 93us; 2us; 65535us; 88us; 91us; 92us; 91us; 2us; 65535us; 88us; 94us; 92us; 94us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 21us; 39us; 57us; 75us; 93us; 111us; 129us; 147us; 165us; 183us; 201us; 219us; 237us; 255us; 273us; 291us; 294us; 296us; 299us; 317us; 319us; 321us; 323us; 326us; 329us; 332us; 336us; 337us; 340us; 343us; 347us; 351us; 353us; 371us; 374us; 377us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 31us; 32us; 1us; 1us; 1us; 2us; 2us; 2us; 6us; 1us; 3us; 1us; 4us; 3us; 5us; 6us; 8us; 1us; 6us; 3us; 7us; 8us; 10us; 2us; 7us; 10us; 1us; 8us; 2us; 9us; 12us; 1us; 10us; 1us; 10us; 1us; 11us; 2us; 11us; 14us; 2us; 11us; 15us; 1us; 12us; 1us; 12us; 3us; 13us; 14us; 15us; 4us; 13us; 14us; 15us; 17us; 1us; 14us; 1us; 15us; 2us; 16us; 17us; 3us; 16us; 17us; 19us; 1us; 17us; 2us; 18us; 19us; 3us; 18us; 19us; 21us; 1us; 19us; 2us; 20us; 21us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 2us; 29us; 52us; 1us; 30us; 3us; 31us; 31us; 32us; 2us; 31us; 32us; 3us; 31us; 32us; 32us; 3us; 31us; 32us; 33us; 4us; 31us; 32us; 39us; 40us; 3us; 31us; 32us; 40us; 3us; 31us; 32us; 42us; 3us; 31us; 32us; 62us; 3us; 31us; 32us; 65us; 1us; 31us; 1us; 32us; 2us; 33us; 41us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 2us; 35us; 36us; 1us; 36us; 1us; 36us; 1us; 38us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 41us; 2us; 43us; 44us; 1us; 44us; 1us; 44us; 1us; 46us; 2us; 47us; 48us; 1us; 48us; 1us; 48us; 2us; 49us; 50us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 62us; 1us; 62us; 2us; 63us; 64us; 1us; 64us; 1us; 64us; 1us; 65us; 1us; 65us; 1us; 66us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 10us; 12us; 15us; 17us; 19us; 23us; 25us; 29us; 32us; 34us; 37us; 39us; 41us; 43us; 46us; 49us; 51us; 53us; 57us; 62us; 64us; 66us; 69us; 73us; 75us; 78us; 82us; 84us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 108us; 110us; 114us; 117us; 121us; 125us; 130us; 134us; 138us; 142us; 146us; 148us; 150us; 153us; 155us; 157us; 159us; 161us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 181us; 183us; 185us; 187us; 190us; 192us; 194us; 197us; 199us; 201us; 203us; 205us; 207us; 209us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 232us; 234us; 236us; 238us; 240us; |]
let _fsyacc_action_rows = 97
let _fsyacc_actionTableElements = [|6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 0us; 49152us; 3us; 32768us; 43us; 53us; 49us; 3us; 53us; 52us; 0us; 16385us; 0us; 16386us; 15us; 16386us; 15us; 16390us; 23us; 16390us; 27us; 16390us; 30us; 16390us; 31us; 16390us; 37us; 16390us; 39us; 16390us; 41us; 16390us; 42us; 16390us; 44us; 16390us; 45us; 16390us; 46us; 16390us; 47us; 16390us; 48us; 16390us; 49us; 16390us; 0us; 16387us; 0us; 16388us; 2us; 16389us; 15us; 9us; 23us; 12us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 13us; 16391us; 27us; 16392us; 30us; 16392us; 31us; 14us; 37us; 16392us; 39us; 16392us; 41us; 16392us; 42us; 16392us; 44us; 16392us; 45us; 16392us; 46us; 16392us; 47us; 16392us; 48us; 16392us; 49us; 16392us; 1us; 16391us; 31us; 14us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 1us; 16393us; 27us; 19us; 1us; 16443us; 13us; 86us; 0us; 16394us; 0us; 16395us; 11us; 16395us; 30us; 16398us; 37us; 16398us; 39us; 16398us; 41us; 16398us; 42us; 16398us; 44us; 16398us; 45us; 16398us; 46us; 16398us; 47us; 16398us; 48us; 16398us; 49us; 16398us; 11us; 16395us; 30us; 16399us; 37us; 16399us; 39us; 16399us; 41us; 16399us; 42us; 16399us; 44us; 16399us; 45us; 16399us; 46us; 16399us; 47us; 16399us; 48us; 16399us; 49us; 16399us; 1us; 16443us; 13us; 86us; 0us; 16396us; 2us; 16397us; 44us; 23us; 45us; 24us; 11us; 16397us; 30us; 16401us; 37us; 16401us; 39us; 16401us; 41us; 16401us; 42us; 16401us; 44us; 23us; 45us; 24us; 46us; 16401us; 47us; 16401us; 48us; 16401us; 49us; 16401us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 1us; 16400us; 46us; 27us; 9us; 16400us; 30us; 16403us; 37us; 16403us; 39us; 16403us; 41us; 16403us; 42us; 16403us; 46us; 27us; 47us; 16403us; 48us; 16403us; 49us; 16403us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 1us; 16402us; 47us; 30us; 8us; 16402us; 30us; 16405us; 37us; 16405us; 39us; 16405us; 41us; 16405us; 42us; 16405us; 47us; 16405us; 48us; 16405us; 49us; 16405us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 1us; 16404us; 48us; 32us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 0us; 16406us; 0us; 16407us; 0us; 16408us; 0us; 16409us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 3us; 16413us; 27us; 82us; 35us; 16439us; 42us; 16439us; 0us; 16414us; 0us; 16415us; 2us; 32768us; 43us; 53us; 53us; 52us; 1us; 16416us; 53us; 52us; 3us; 32768us; 39us; 55us; 43us; 53us; 53us; 52us; 3us; 16423us; 37us; 63us; 43us; 53us; 53us; 52us; 2us; 16424us; 43us; 53us; 53us; 52us; 2us; 16426us; 43us; 53us; 53us; 52us; 2us; 16446us; 43us; 53us; 53us; 52us; 2us; 16449us; 43us; 53us; 53us; 52us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 6us; 16429us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 41us; 54us; 39us; 0us; 16417us; 6us; 16421us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 1us; 32768us; 41us; 58us; 0us; 16418us; 1us; 16419us; 42us; 60us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 0us; 16420us; 0us; 16422us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 1us; 32768us; 35us; 65us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 0us; 16425us; 1us; 16427us; 42us; 68us; 1us; 32768us; 14us; 77us; 0us; 16428us; 0us; 16430us; 1us; 16431us; 42us; 72us; 1us; 32768us; 51us; 79us; 0us; 16432us; 1us; 16433us; 42us; 75us; 1us; 32768us; 14us; 77us; 0us; 16434us; 1us; 32768us; 51us; 79us; 0us; 16435us; 1us; 16439us; 27us; 82us; 0us; 16436us; 0us; 16440us; 1us; 16443us; 13us; 86us; 0us; 16441us; 1us; 32768us; 0us; 87us; 0us; 16442us; 0us; 16444us; 0us; 16445us; 1us; 32768us; 51us; 96us; 1us; 32768us; 30us; 90us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 1us; 16447us; 42us; 92us; 1us; 32768us; 51us; 96us; 0us; 16448us; 1us; 32768us; 44us; 95us; 6us; 32768us; 32us; 88us; 38us; 54us; 40us; 56us; 50us; 42us; 51us; 40us; 54us; 39us; 0us; 16450us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 7us; 8us; 12us; 13us; 14us; 30us; 31us; 32us; 35us; 42us; 56us; 58us; 65us; 67us; 69us; 70us; 71us; 83us; 95us; 97us; 98us; 101us; 113us; 120us; 127us; 129us; 139us; 146us; 148us; 157us; 164us; 166us; 173us; 174us; 175us; 176us; 177us; 178us; 179us; 180us; 181us; 185us; 186us; 187us; 190us; 192us; 196us; 200us; 203us; 206us; 209us; 212us; 219us; 226us; 233us; 234us; 241us; 243us; 244us; 246us; 253us; 254us; 255us; 262us; 264us; 271us; 272us; 274us; 276us; 277us; 278us; 280us; 282us; 283us; 285us; 287us; 288us; 290us; 291us; 293us; 294us; 295us; 297us; 298us; 300us; 301us; 302us; 303us; 305us; 307us; 314us; 316us; 318us; 319us; 321us; 328us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 3us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 1us; 3us; 0us; 1us; 1us; 3us; 4us; 1us; 1us; 3us; 0us; 1us; 1us; 3us; 1us; 3us; 2us; 2us; 0us; 1us; 0us; 1us; 2us; 2us; 0us; 1us; 1us; 4us; 1us; 3us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 11us; 11us; 11us; 12us; 13us; 13us; 14us; 15us; 16us; 17us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 22us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 26us; 27us; 28us; 29us; 29us; 30us; 30us; 31us; 32us; 33us; 33us; 34us; 35us; 36us; 36us; 37us; 38us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 16387us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 16395us; 65535us; 65535us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 16407us; 16408us; 16409us; 16410us; 16411us; 16412us; 16413us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16417us; 65535us; 65535us; 16418us; 65535us; 65535us; 16420us; 16422us; 65535us; 65535us; 65535us; 16425us; 65535us; 65535us; 16428us; 16430us; 65535us; 65535us; 16432us; 65535us; 65535us; 16434us; 65535us; 16435us; 65535us; 16436us; 16440us; 65535us; 16441us; 65535us; 16442us; 16444us; 16445us; 65535us; 65535us; 65535us; 65535us; 65535us; 16448us; 65535us; 65535us; 16450us; |]
let _fsyacc_reductions ()  =    [| 
# 520 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startparse));
# 529 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                            boilerplate + _1 
                   )
# 81 "Parser.fsy"
                 : string));
# 540 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_logical_or_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                     _1 
                   )
# 84 "Parser.fsy"
                 : 'gentype_expression));
# 551 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_function_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                 _1 
                   )
# 85 "Parser.fsy"
                 : 'gentype_expression));
# 562 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_let_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                            _1 
                   )
# 86 "Parser.fsy"
                 : 'gentype_expression));
# 573 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_logical_and_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                     _1 
                   )
# 89 "Parser.fsy"
                 : 'gentype_logical_or_expression));
# 584 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_logical_and_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_logical_or_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                                              $"{_1}{_2}{_3}" 
                   )
# 90 "Parser.fsy"
                 : 'gentype_logical_or_expression));
# 597 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_is_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                             _1 
                   )
# 93 "Parser.fsy"
                 : 'gentype_logical_and_expression));
# 608 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_logical_and_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_is_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                                       printfn "logical and exp = '%s%s%s'" _1 _2 _3; $"{_1}{_2}{_3}" 
                   )
# 94 "Parser.fsy"
                 : 'gentype_logical_and_expression));
# 621 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_as_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                            _1 
                   )
# 97 "Parser.fsy"
                 : 'gentype_is_expression));
# 632 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_is_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_nullable_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                                       $"{_1}{_2}{_3}" 
                   )
# 98 "Parser.fsy"
                 : 'gentype_is_expression));
# 645 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_equality_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                  _1 
                   )
# 101 "Parser.fsy"
                 : 'gentype_as_expression));
# 656 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_as_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_nullable_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                                       $"{_1}{_2}{_3}" 
                   )
# 102 "Parser.fsy"
                 : 'gentype_as_expression));
# 669 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_relational_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                    _1 
                   )
# 105 "Parser.fsy"
                 : 'gentype_equality_expression));
# 680 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_relational_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_equality_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                                           $"{_1}{_2}{_3}" 
                   )
# 106 "Parser.fsy"
                 : 'gentype_equality_expression));
# 693 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_relational_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_equality_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                                           $"{_1}{_2}{_3}" 
                   )
# 107 "Parser.fsy"
                 : 'gentype_equality_expression));
# 706 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_additive_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                  _1 
                   )
# 110 "Parser.fsy"
                 : 'gentype_relational_expression));
# 717 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_additive_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_relational_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                                                            $"{_1}{_2}{_3}" 
                   )
# 111 "Parser.fsy"
                 : 'gentype_relational_expression));
# 730 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_multiplicative_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                         _1 
                   )
# 114 "Parser.fsy"
                 : 'gentype_additive_expression));
# 741 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_multiplicative_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_additive_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                               $"{_1}{_2}{_3}" 
                   )
# 116 "Parser.fsy"
                 : 'gentype_additive_expression));
# 754 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                                 _1 
                   )
# 119 "Parser.fsy"
                 : 'gentype_multiplicative_expression));
# 765 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_primary_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_multiplicative_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                                                                   $"{_1}{_2}{_3}" 
                   )
# 120 "Parser.fsy"
                 : 'gentype_multiplicative_expression));
# 778 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_literal_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                                 _1 
                   )
# 123 "Parser.fsy"
                 : 'gentype_primary_expression));
# 789 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_identifier_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                                               _1 
                   )
# 124 "Parser.fsy"
                 : 'gentype_primary_expression));
# 800 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_invoke_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                               _1 
                   )
# 125 "Parser.fsy"
                 : 'gentype_primary_expression));
# 811 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_forward_pipeline_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                               _1 
                   )
# 126 "Parser.fsy"
                 : 'gentype_primary_expression));
# 822 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parenthesized_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                                               _1 
                   )
# 127 "Parser.fsy"
                 : 'gentype_primary_expression));
# 833 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_list_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                                               _1 
                   )
# 128 "Parser.fsy"
                 : 'gentype_primary_expression));
# 844 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                                               _1 
                   )
# 131 "Parser.fsy"
                 : 'gentype_literal_expression));
# 855 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                                                _1 
                   )
# 134 "Parser.fsy"
                 : 'gentype_identifier_expression));
# 866 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                                              $"Usagi_Nakamura.Curry({_1})" 
                   )
# 135 "Parser.fsy"
                 : 'gentype_identifier_expression));
# 877 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                                $"{_1}{_2}({_3})" 
                   )
# 138 "Parser.fsy"
                 : 'gentype_invoke_expression));
# 890 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                                                           $"{_3}({_1})" 
                   )
# 141 "Parser.fsy"
                 : 'gentype_forward_pipeline_expression));
# 903 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                                              $"{_1}{_2}{_3}" 
                   )
# 144 "Parser.fsy"
                 : 'gentype_parenthesized_expression));
# 916 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_item_list_opt in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                                     "{" + _2 + "}" 
                   )
# 151 "Parser.fsy"
                 : 'gentype_list_expression));
# 929 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_item in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                  _1 
                   )
# 154 "Parser.fsy"
                 : 'gentype_item_list));
# 940 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_item in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_item_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                  $"{_1}{_2}{_3}" 
                   )
# 155 "Parser.fsy"
                 : 'gentype_item_list));
# 953 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                         "" 
                   )
# 158 "Parser.fsy"
                 : 'gentype_item_list_opt));
# 963 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_item_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                       _1 
                   )
# 159 "Parser.fsy"
                 : 'gentype_item_list_opt));
# 974 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                        _1 
                   )
# 162 "Parser.fsy"
                 : 'gentype_item));
# 985 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                          $"{_1}{_2}{_3}" 
                   )
# 163 "Parser.fsy"
                 : 'gentype_item));
# 998 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_parameter_list_opt in
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_function_body in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                             $"{_1}{_2}{_3}{_4}" 
                   )
# 171 "Parser.fsy"
                 : 'gentype_function_expression));
# 1012 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                      _1 
                   )
# 174 "Parser.fsy"
                 : 'gentype_function_body));
# 1023 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fixed_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                  _1 
                   )
# 177 "Parser.fsy"
                 : 'gentype_parameter_list));
# 1034 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fixed_parameter_list in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_optional_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                                                                $"{_1}{_2}{_3}" 
                   )
# 178 "Parser.fsy"
                 : 'gentype_parameter_list));
# 1047 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                         "" 
                   )
# 181 "Parser.fsy"
                 : 'gentype_parameter_list_opt));
# 1057 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                            _1 
                   )
# 182 "Parser.fsy"
                 : 'gentype_parameter_list_opt));
# 1068 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parameter in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                                       _1 
                   )
# 185 "Parser.fsy"
                 : 'gentype_fixed_parameter_list));
# 1079 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parameter in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_fixed_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                                  $"{_1}{_2}{_3}" 
                   )
# 186 "Parser.fsy"
                 : 'gentype_fixed_parameter_list));
# 1092 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optional_parameter in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                                 _1 
                   )
# 189 "Parser.fsy"
                 : 'gentype_optional_parameter_list));
# 1103 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optional_parameter in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_optional_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                                                               $"{_1}{_2}{_3}" 
                   )
# 190 "Parser.fsy"
                 : 'gentype_optional_parameter_list));
# 1116 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_parameter in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                $"{_1}{_2}" 
                   )
# 193 "Parser.fsy"
                 : 'gentype_optional_parameter));
# 1128 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_parameter_type_opt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                                           $"{_1}{_2}" 
                   )
# 196 "Parser.fsy"
                 : 'gentype_parameter));
# 1140 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "Parser.fsy"
                                         "" 
                   )
# 199 "Parser.fsy"
                 : 'gentype_return_type_opt));
# 1150 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_assertion in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                       _1 
                   )
# 200 "Parser.fsy"
                 : 'gentype_return_type_opt));
# 1161 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                         "" 
                   )
# 203 "Parser.fsy"
                 : 'gentype_parameter_type_opt));
# 1171 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_assertion in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                                       _1 
                   )
# 204 "Parser.fsy"
                 : 'gentype_parameter_type_opt));
# 1182 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_nullable_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                                      $"{_1}{_2}" 
                   )
# 207 "Parser.fsy"
                 : 'gentype_assertion));
# 1194 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_nullable_opt in
            let _2 = parseState.GetInput(2) :?> 'gentype_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "Parser.fsy"
                                                         $"{_1}{_2}" 
                   )
# 210 "Parser.fsy"
                 : 'gentype_nullable_primitive_type));
# 1206 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "Parser.fsy"
                                         "" 
                   )
# 213 "Parser.fsy"
                 : 'gentype_nullable_opt));
# 1216 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "Parser.fsy"
                                      _1 
                   )
# 214 "Parser.fsy"
                 : 'gentype_nullable_opt));
# 1227 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                                                                 _1 
                   )
# 217 "Parser.fsy"
                 : 'gentype_primitive_type));
# 1238 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_variable_list in
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "Parser.fsy"
                             $"{_1}{_2}{_3}{_4}" 
                   )
# 225 "Parser.fsy"
                 : 'gentype_let_expression));
# 1252 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "Parser.fsy"
                                      _1 
                   )
# 228 "Parser.fsy"
                 : 'gentype_variable_list));
# 1263 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_variable_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "Parser.fsy"
                                                          $"{_1}{_2}{_3}" 
                   )
# 229 "Parser.fsy"
                 : 'gentype_variable_list));
# 1276 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable_name in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "Parser.fsy"
                                                         $"{_1}{_2}{_3}" 
                   )
# 232 "Parser.fsy"
                 : 'gentype_variable));
# 1289 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "Parser.fsy"
                                        _1 
                   )
# 235 "Parser.fsy"
                 : 'gentype_variable_name));
|]
# 1301 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 58;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let parse lexer lexbuf : string =
    engine lexer lexbuf 0 :?> _
