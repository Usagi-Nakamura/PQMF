// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


let (++) (str1: string) (str2: string) = str1 + "\n" + str2

let boilerplate = 
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "// Start of Boilerplate" ++
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "let" ++
    "    Usagi_Nakamura.Curry = (f as function) =>" ++
    "        let" ++
    "            arity = Record.FieldCount(Type.FunctionParameters(Value.Type(f)))," ++
    "            ApplyTo =" ++
    "                (args as list) =>" ++
    "                    if List.Count(args) >= arity then" ++
    "                        Function.Invoke(f, args)" ++
    "                    else" ++
    "                        (x as any) =>" ++
    "                        if List.Count(args) = arity - 1" ++
    "                        then @ApplyTo({x} & args)" ++
    "                        else @ApplyTo(args & {x})" ++
    "    in" ++
    "        ApplyTo({})" ++
    "in" ++
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "// End of Boilerplate" ++
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "\n\n"    

let remove_first (s: string) = s.Substring(1, s.Length - 1)


# 39 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE of (string)
  | HASH_SHARED of (string)
  | HASH_TABLE of (string)
  | HASH_TIME of (string)
  | HASH_DURATION of (string)
  | HASH_INFINITY of (string)
  | HASH_NAN of (string)
  | HASH_SECTION of (string)
  | HASH_BINARY of (string)
  | HASH_DATE of (string)
  | HASH_DATETIME of (string)
  | HASH_DATETIMEZONE of (string)
  | NULL of (string)
  | NULLABLE of (string)
  | OPTIONAL of (string)
  | OR of (string)
  | OTHERWISE of (string)
  | SECTION of (string)
  | SHARED of (string)
  | THEN of (string)
  | TRUE of (string)
  | TRY of (string)
  | TYPE of (string)
  | AND of (string)
  | EACH of (string)
  | ELSE of (string)
  | ERROR of (string)
  | AS of (string)
  | FALSE of (string)
  | IF of (string)
  | IN of (string)
  | IS of (string)
  | LET of (string)
  | META of (string)
  | NOT of (string)
  | QUESTION_MARK of (string)
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR of (string)
  | FUNCTION_OPERATOR of (string)
  | DOT of (string)
  | DOTDOT of (string)
  | OPENING_PARENTHESIS of (string)
  | CLOSING_PARENTHESIS of (string)
  | OPENING_BRACE of (string)
  | CLOSING_BRACE of (string)
  | OPENING_SQUARE_BRACKET of (string)
  | CLOSING_SQUARE_BRACKET of (string)
  | COMMA of (string)
  | FORWARD_PIPELINE_OPERATOR of (string)
  | EQ of (string)
  | NE of (string)
  | RELATIONAL_OPERATOR of (string)
  | ADDITIVE_OPERATOR of (string)
  | MULTIPLICATIVE_OPERATOR of (string)
  | EOF
  | IDENTIFIER_WITH_PRIME of (string)
  | IDENTIFIER of (string)
  | APPLICATION of (string)
  | WHITESPACE of (string)
  | LITERAL of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE
    | TOKEN_HASH_SHARED
    | TOKEN_HASH_TABLE
    | TOKEN_HASH_TIME
    | TOKEN_HASH_DURATION
    | TOKEN_HASH_INFINITY
    | TOKEN_HASH_NAN
    | TOKEN_HASH_SECTION
    | TOKEN_HASH_BINARY
    | TOKEN_HASH_DATE
    | TOKEN_HASH_DATETIME
    | TOKEN_HASH_DATETIMEZONE
    | TOKEN_NULL
    | TOKEN_NULLABLE
    | TOKEN_OPTIONAL
    | TOKEN_OR
    | TOKEN_OTHERWISE
    | TOKEN_SECTION
    | TOKEN_SHARED
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_TRY
    | TOKEN_TYPE
    | TOKEN_AND
    | TOKEN_EACH
    | TOKEN_ELSE
    | TOKEN_ERROR
    | TOKEN_AS
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_IS
    | TOKEN_LET
    | TOKEN_META
    | TOKEN_NOT
    | TOKEN_QUESTION_MARK
    | TOKEN_CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR
    | TOKEN_FUNCTION_OPERATOR
    | TOKEN_DOT
    | TOKEN_DOTDOT
    | TOKEN_OPENING_PARENTHESIS
    | TOKEN_CLOSING_PARENTHESIS
    | TOKEN_OPENING_BRACE
    | TOKEN_CLOSING_BRACE
    | TOKEN_OPENING_SQUARE_BRACKET
    | TOKEN_CLOSING_SQUARE_BRACKET
    | TOKEN_COMMA
    | TOKEN_FORWARD_PIPELINE_OPERATOR
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_RELATIONAL_OPERATOR
    | TOKEN_ADDITIVE_OPERATOR
    | TOKEN_MULTIPLICATIVE_OPERATOR
    | TOKEN_EOF
    | TOKEN_IDENTIFIER_WITH_PRIME
    | TOKEN_IDENTIFIER
    | TOKEN_APPLICATION
    | TOKEN_WHITESPACE
    | TOKEN_LITERAL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startparse
    | NONTERM_parse
    | NONTERM_expression
    | NONTERM_expression_a
    | NONTERM_unary_expression
    | NONTERM_literal_expression
    | NONTERM_identifier_expression
    | NONTERM_generalized_identifier_part
    | NONTERM_generalized_identifier_segment
    | NONTERM_keyword_or_identifier
    | NONTERM_keyword_not_starting_hash
    | NONTERM_invoke_expression
    | NONTERM_invoke_parameter_list
    | NONTERM_forward_pipeline_expression
    | NONTERM_parenthesized_expression
    | NONTERM_item_access_expression
    | NONTERM_item_selection
    | NONTERM_optional_item_selection
    | NONTERM_item_selector
    | NONTERM_list_expression
    | NONTERM_item_list
    | NONTERM_item_list_opt
    | NONTERM_item
    | NONTERM_record_expression
    | NONTERM_field_list_opt
    | NONTERM_field_list
    | NONTERM_field
    | NONTERM_field_name
    | NONTERM_function_expression
    | NONTERM_function_body
    | NONTERM_parameter_list
    | NONTERM_parameter_list_opt
    | NONTERM_fixed_parameter_list
    | NONTERM_optional_parameter_list
    | NONTERM_optional_parameter
    | NONTERM_parameter
    | NONTERM_return_type_opt
    | NONTERM_parameter_type_opt
    | NONTERM_assertion
    | NONTERM_nullable_primitive_type
    | NONTERM_nullable_opt
    | NONTERM_primitive_type
    | NONTERM_let_expression
    | NONTERM_variable_list
    | NONTERM_variable

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE _ -> 0 
  | HASH_SHARED _ -> 1 
  | HASH_TABLE _ -> 2 
  | HASH_TIME _ -> 3 
  | HASH_DURATION _ -> 4 
  | HASH_INFINITY _ -> 5 
  | HASH_NAN _ -> 6 
  | HASH_SECTION _ -> 7 
  | HASH_BINARY _ -> 8 
  | HASH_DATE _ -> 9 
  | HASH_DATETIME _ -> 10 
  | HASH_DATETIMEZONE _ -> 11 
  | NULL _ -> 12 
  | NULLABLE _ -> 13 
  | OPTIONAL _ -> 14 
  | OR _ -> 15 
  | OTHERWISE _ -> 16 
  | SECTION _ -> 17 
  | SHARED _ -> 18 
  | THEN _ -> 19 
  | TRUE _ -> 20 
  | TRY _ -> 21 
  | TYPE _ -> 22 
  | AND _ -> 23 
  | EACH _ -> 24 
  | ELSE _ -> 25 
  | ERROR _ -> 26 
  | AS _ -> 27 
  | FALSE _ -> 28 
  | IF _ -> 29 
  | IN _ -> 30 
  | IS _ -> 31 
  | LET _ -> 32 
  | META _ -> 33 
  | NOT _ -> 34 
  | QUESTION_MARK _ -> 35 
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR _ -> 36 
  | FUNCTION_OPERATOR _ -> 37 
  | DOT _ -> 38 
  | DOTDOT _ -> 39 
  | OPENING_PARENTHESIS _ -> 40 
  | CLOSING_PARENTHESIS _ -> 41 
  | OPENING_BRACE _ -> 42 
  | CLOSING_BRACE _ -> 43 
  | OPENING_SQUARE_BRACKET _ -> 44 
  | CLOSING_SQUARE_BRACKET _ -> 45 
  | COMMA _ -> 46 
  | FORWARD_PIPELINE_OPERATOR _ -> 47 
  | EQ _ -> 48 
  | NE _ -> 49 
  | RELATIONAL_OPERATOR _ -> 50 
  | ADDITIVE_OPERATOR _ -> 51 
  | MULTIPLICATIVE_OPERATOR _ -> 52 
  | EOF  -> 53 
  | IDENTIFIER_WITH_PRIME _ -> 54 
  | IDENTIFIER _ -> 55 
  | APPLICATION _ -> 56 
  | WHITESPACE _ -> 57 
  | LITERAL _ -> 58 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE 
  | 1 -> TOKEN_HASH_SHARED 
  | 2 -> TOKEN_HASH_TABLE 
  | 3 -> TOKEN_HASH_TIME 
  | 4 -> TOKEN_HASH_DURATION 
  | 5 -> TOKEN_HASH_INFINITY 
  | 6 -> TOKEN_HASH_NAN 
  | 7 -> TOKEN_HASH_SECTION 
  | 8 -> TOKEN_HASH_BINARY 
  | 9 -> TOKEN_HASH_DATE 
  | 10 -> TOKEN_HASH_DATETIME 
  | 11 -> TOKEN_HASH_DATETIMEZONE 
  | 12 -> TOKEN_NULL 
  | 13 -> TOKEN_NULLABLE 
  | 14 -> TOKEN_OPTIONAL 
  | 15 -> TOKEN_OR 
  | 16 -> TOKEN_OTHERWISE 
  | 17 -> TOKEN_SECTION 
  | 18 -> TOKEN_SHARED 
  | 19 -> TOKEN_THEN 
  | 20 -> TOKEN_TRUE 
  | 21 -> TOKEN_TRY 
  | 22 -> TOKEN_TYPE 
  | 23 -> TOKEN_AND 
  | 24 -> TOKEN_EACH 
  | 25 -> TOKEN_ELSE 
  | 26 -> TOKEN_ERROR 
  | 27 -> TOKEN_AS 
  | 28 -> TOKEN_FALSE 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_IN 
  | 31 -> TOKEN_IS 
  | 32 -> TOKEN_LET 
  | 33 -> TOKEN_META 
  | 34 -> TOKEN_NOT 
  | 35 -> TOKEN_QUESTION_MARK 
  | 36 -> TOKEN_CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR 
  | 37 -> TOKEN_FUNCTION_OPERATOR 
  | 38 -> TOKEN_DOT 
  | 39 -> TOKEN_DOTDOT 
  | 40 -> TOKEN_OPENING_PARENTHESIS 
  | 41 -> TOKEN_CLOSING_PARENTHESIS 
  | 42 -> TOKEN_OPENING_BRACE 
  | 43 -> TOKEN_CLOSING_BRACE 
  | 44 -> TOKEN_OPENING_SQUARE_BRACKET 
  | 45 -> TOKEN_CLOSING_SQUARE_BRACKET 
  | 46 -> TOKEN_COMMA 
  | 47 -> TOKEN_FORWARD_PIPELINE_OPERATOR 
  | 48 -> TOKEN_EQ 
  | 49 -> TOKEN_NE 
  | 50 -> TOKEN_RELATIONAL_OPERATOR 
  | 51 -> TOKEN_ADDITIVE_OPERATOR 
  | 52 -> TOKEN_MULTIPLICATIVE_OPERATOR 
  | 53 -> TOKEN_EOF 
  | 54 -> TOKEN_IDENTIFIER_WITH_PRIME 
  | 55 -> TOKEN_IDENTIFIER 
  | 56 -> TOKEN_APPLICATION 
  | 57 -> TOKEN_WHITESPACE 
  | 58 -> TOKEN_LITERAL 
  | 61 -> TOKEN_end_of_input
  | 59 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startparse 
    | 1 -> NONTERM_parse 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression_a 
    | 4 -> NONTERM_expression_a 
    | 5 -> NONTERM_expression_a 
    | 6 -> NONTERM_expression_a 
    | 7 -> NONTERM_expression_a 
    | 8 -> NONTERM_expression_a 
    | 9 -> NONTERM_expression_a 
    | 10 -> NONTERM_expression_a 
    | 11 -> NONTERM_expression_a 
    | 12 -> NONTERM_expression_a 
    | 13 -> NONTERM_expression_a 
    | 14 -> NONTERM_expression_a 
    | 15 -> NONTERM_expression_a 
    | 16 -> NONTERM_expression_a 
    | 17 -> NONTERM_expression_a 
    | 18 -> NONTERM_expression_a 
    | 19 -> NONTERM_expression_a 
    | 20 -> NONTERM_expression_a 
    | 21 -> NONTERM_expression_a 
    | 22 -> NONTERM_expression_a 
    | 23 -> NONTERM_expression_a 
    | 24 -> NONTERM_unary_expression 
    | 25 -> NONTERM_unary_expression 
    | 26 -> NONTERM_literal_expression 
    | 27 -> NONTERM_literal_expression 
    | 28 -> NONTERM_literal_expression 
    | 29 -> NONTERM_literal_expression 
    | 30 -> NONTERM_identifier_expression 
    | 31 -> NONTERM_identifier_expression 
    | 32 -> NONTERM_generalized_identifier_part 
    | 33 -> NONTERM_generalized_identifier_segment 
    | 34 -> NONTERM_generalized_identifier_segment 
    | 35 -> NONTERM_keyword_or_identifier 
    | 36 -> NONTERM_keyword_or_identifier 
    | 37 -> NONTERM_keyword_not_starting_hash 
    | 38 -> NONTERM_keyword_not_starting_hash 
    | 39 -> NONTERM_keyword_not_starting_hash 
    | 40 -> NONTERM_keyword_not_starting_hash 
    | 41 -> NONTERM_keyword_not_starting_hash 
    | 42 -> NONTERM_keyword_not_starting_hash 
    | 43 -> NONTERM_keyword_not_starting_hash 
    | 44 -> NONTERM_keyword_not_starting_hash 
    | 45 -> NONTERM_keyword_not_starting_hash 
    | 46 -> NONTERM_keyword_not_starting_hash 
    | 47 -> NONTERM_keyword_not_starting_hash 
    | 48 -> NONTERM_keyword_not_starting_hash 
    | 49 -> NONTERM_keyword_not_starting_hash 
    | 50 -> NONTERM_keyword_not_starting_hash 
    | 51 -> NONTERM_keyword_not_starting_hash 
    | 52 -> NONTERM_keyword_not_starting_hash 
    | 53 -> NONTERM_keyword_not_starting_hash 
    | 54 -> NONTERM_keyword_not_starting_hash 
    | 55 -> NONTERM_keyword_not_starting_hash 
    | 56 -> NONTERM_keyword_not_starting_hash 
    | 57 -> NONTERM_keyword_not_starting_hash 
    | 58 -> NONTERM_invoke_expression 
    | 59 -> NONTERM_invoke_parameter_list 
    | 60 -> NONTERM_invoke_parameter_list 
    | 61 -> NONTERM_forward_pipeline_expression 
    | 62 -> NONTERM_parenthesized_expression 
    | 63 -> NONTERM_item_access_expression 
    | 64 -> NONTERM_item_access_expression 
    | 65 -> NONTERM_item_selection 
    | 66 -> NONTERM_optional_item_selection 
    | 67 -> NONTERM_item_selector 
    | 68 -> NONTERM_list_expression 
    | 69 -> NONTERM_item_list 
    | 70 -> NONTERM_item_list 
    | 71 -> NONTERM_item_list_opt 
    | 72 -> NONTERM_item_list_opt 
    | 73 -> NONTERM_item 
    | 74 -> NONTERM_item 
    | 75 -> NONTERM_record_expression 
    | 76 -> NONTERM_field_list_opt 
    | 77 -> NONTERM_field_list_opt 
    | 78 -> NONTERM_field_list 
    | 79 -> NONTERM_field_list 
    | 80 -> NONTERM_field 
    | 81 -> NONTERM_field_name 
    | 82 -> NONTERM_function_expression 
    | 83 -> NONTERM_function_body 
    | 84 -> NONTERM_parameter_list 
    | 85 -> NONTERM_parameter_list 
    | 86 -> NONTERM_parameter_list_opt 
    | 87 -> NONTERM_parameter_list_opt 
    | 88 -> NONTERM_fixed_parameter_list 
    | 89 -> NONTERM_fixed_parameter_list 
    | 90 -> NONTERM_optional_parameter_list 
    | 91 -> NONTERM_optional_parameter_list 
    | 92 -> NONTERM_optional_parameter 
    | 93 -> NONTERM_parameter 
    | 94 -> NONTERM_return_type_opt 
    | 95 -> NONTERM_return_type_opt 
    | 96 -> NONTERM_parameter_type_opt 
    | 97 -> NONTERM_parameter_type_opt 
    | 98 -> NONTERM_assertion 
    | 99 -> NONTERM_nullable_primitive_type 
    | 100 -> NONTERM_nullable_opt 
    | 101 -> NONTERM_nullable_opt 
    | 102 -> NONTERM_primitive_type 
    | 103 -> NONTERM_let_expression 
    | 104 -> NONTERM_variable_list 
    | 105 -> NONTERM_variable_list 
    | 106 -> NONTERM_variable 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 61 
let _fsyacc_tagOfErrorTerminal = 59

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE _ -> "PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE" 
  | HASH_SHARED _ -> "HASH_SHARED" 
  | HASH_TABLE _ -> "HASH_TABLE" 
  | HASH_TIME _ -> "HASH_TIME" 
  | HASH_DURATION _ -> "HASH_DURATION" 
  | HASH_INFINITY _ -> "HASH_INFINITY" 
  | HASH_NAN _ -> "HASH_NAN" 
  | HASH_SECTION _ -> "HASH_SECTION" 
  | HASH_BINARY _ -> "HASH_BINARY" 
  | HASH_DATE _ -> "HASH_DATE" 
  | HASH_DATETIME _ -> "HASH_DATETIME" 
  | HASH_DATETIMEZONE _ -> "HASH_DATETIMEZONE" 
  | NULL _ -> "NULL" 
  | NULLABLE _ -> "NULLABLE" 
  | OPTIONAL _ -> "OPTIONAL" 
  | OR _ -> "OR" 
  | OTHERWISE _ -> "OTHERWISE" 
  | SECTION _ -> "SECTION" 
  | SHARED _ -> "SHARED" 
  | THEN _ -> "THEN" 
  | TRUE _ -> "TRUE" 
  | TRY _ -> "TRY" 
  | TYPE _ -> "TYPE" 
  | AND _ -> "AND" 
  | EACH _ -> "EACH" 
  | ELSE _ -> "ELSE" 
  | ERROR _ -> "ERROR" 
  | AS _ -> "AS" 
  | FALSE _ -> "FALSE" 
  | IF _ -> "IF" 
  | IN _ -> "IN" 
  | IS _ -> "IS" 
  | LET _ -> "LET" 
  | META _ -> "META" 
  | NOT _ -> "NOT" 
  | QUESTION_MARK _ -> "QUESTION_MARK" 
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR _ -> "CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR" 
  | FUNCTION_OPERATOR _ -> "FUNCTION_OPERATOR" 
  | DOT _ -> "DOT" 
  | DOTDOT _ -> "DOTDOT" 
  | OPENING_PARENTHESIS _ -> "OPENING_PARENTHESIS" 
  | CLOSING_PARENTHESIS _ -> "CLOSING_PARENTHESIS" 
  | OPENING_BRACE _ -> "OPENING_BRACE" 
  | CLOSING_BRACE _ -> "CLOSING_BRACE" 
  | OPENING_SQUARE_BRACKET _ -> "OPENING_SQUARE_BRACKET" 
  | CLOSING_SQUARE_BRACKET _ -> "CLOSING_SQUARE_BRACKET" 
  | COMMA _ -> "COMMA" 
  | FORWARD_PIPELINE_OPERATOR _ -> "FORWARD_PIPELINE_OPERATOR" 
  | EQ _ -> "EQ" 
  | NE _ -> "NE" 
  | RELATIONAL_OPERATOR _ -> "RELATIONAL_OPERATOR" 
  | ADDITIVE_OPERATOR _ -> "ADDITIVE_OPERATOR" 
  | MULTIPLICATIVE_OPERATOR _ -> "MULTIPLICATIVE_OPERATOR" 
  | EOF  -> "EOF" 
  | IDENTIFIER_WITH_PRIME _ -> "IDENTIFIER_WITH_PRIME" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | APPLICATION _ -> "APPLICATION" 
  | WHITESPACE _ -> "WHITESPACE" 
  | LITERAL _ -> "LITERAL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_SHARED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_TABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_TIME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DURATION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_INFINITY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_NAN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_SECTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_BINARY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DATE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DATETIME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DATETIMEZONE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NULL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NULLABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPTIONAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OTHERWISE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SECTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SHARED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EACH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ERROR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | META _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | QUESTION_MARK _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUNCTION_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOTDOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPENING_PARENTHESIS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CLOSING_PARENTHESIS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPENING_BRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CLOSING_BRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPENING_SQUARE_BRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CLOSING_SQUARE_BRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FORWARD_PIPELINE_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RELATIONAL_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ADDITIVE_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MULTIPLICATIVE_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | IDENTIFIER_WITH_PRIME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | APPLICATION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WHITESPACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 22us; 65535us; 0us; 2us; 25us; 5us; 26us; 6us; 31us; 7us; 32us; 8us; 33us; 9us; 34us; 10us; 35us; 11us; 36us; 12us; 48us; 13us; 49us; 14us; 59us; 15us; 60us; 16us; 61us; 17us; 65us; 18us; 69us; 19us; 73us; 19us; 76us; 20us; 85us; 21us; 88us; 22us; 113us; 23us; 118us; 24us; 22us; 65535us; 0us; 4us; 25us; 4us; 26us; 4us; 31us; 4us; 32us; 4us; 33us; 4us; 34us; 4us; 35us; 4us; 36us; 4us; 48us; 4us; 49us; 4us; 59us; 4us; 60us; 4us; 61us; 4us; 65us; 4us; 69us; 4us; 73us; 4us; 76us; 4us; 85us; 4us; 88us; 4us; 113us; 4us; 118us; 4us; 22us; 65535us; 0us; 37us; 25us; 37us; 26us; 37us; 31us; 37us; 32us; 37us; 33us; 37us; 34us; 37us; 35us; 37us; 36us; 37us; 48us; 37us; 49us; 37us; 59us; 37us; 60us; 37us; 61us; 37us; 65us; 37us; 69us; 37us; 73us; 37us; 76us; 37us; 85us; 37us; 88us; 37us; 113us; 37us; 118us; 37us; 22us; 65535us; 0us; 38us; 25us; 38us; 26us; 38us; 31us; 38us; 32us; 38us; 33us; 38us; 34us; 38us; 35us; 38us; 36us; 38us; 48us; 38us; 49us; 38us; 59us; 38us; 60us; 38us; 61us; 38us; 65us; 38us; 69us; 38us; 73us; 38us; 76us; 38us; 85us; 38us; 88us; 38us; 113us; 38us; 118us; 38us; 22us; 65535us; 0us; 40us; 25us; 40us; 26us; 40us; 31us; 40us; 32us; 40us; 33us; 40us; 34us; 40us; 35us; 40us; 36us; 40us; 48us; 40us; 49us; 40us; 59us; 40us; 60us; 40us; 61us; 40us; 65us; 40us; 69us; 40us; 73us; 40us; 76us; 40us; 85us; 40us; 88us; 40us; 113us; 40us; 118us; 40us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 0us; 65535us; 22us; 65535us; 0us; 41us; 25us; 41us; 26us; 41us; 31us; 41us; 32us; 41us; 33us; 41us; 34us; 41us; 35us; 41us; 36us; 41us; 48us; 41us; 49us; 41us; 59us; 41us; 60us; 41us; 61us; 41us; 65us; 41us; 69us; 41us; 73us; 41us; 76us; 41us; 85us; 41us; 88us; 41us; 113us; 41us; 118us; 41us; 21us; 65535us; 2us; 57us; 5us; 57us; 6us; 57us; 7us; 57us; 8us; 57us; 9us; 57us; 10us; 57us; 11us; 57us; 12us; 57us; 13us; 57us; 14us; 57us; 15us; 58us; 16us; 57us; 17us; 57us; 18us; 57us; 19us; 57us; 20us; 57us; 21us; 57us; 22us; 57us; 23us; 57us; 24us; 57us; 22us; 65535us; 0us; 42us; 25us; 42us; 26us; 42us; 31us; 42us; 32us; 42us; 33us; 42us; 34us; 42us; 35us; 42us; 36us; 42us; 48us; 42us; 49us; 42us; 59us; 42us; 60us; 42us; 61us; 42us; 65us; 42us; 69us; 42us; 73us; 42us; 76us; 42us; 85us; 42us; 88us; 42us; 113us; 42us; 118us; 42us; 22us; 65535us; 0us; 43us; 25us; 43us; 26us; 43us; 31us; 43us; 32us; 43us; 33us; 43us; 34us; 43us; 35us; 43us; 36us; 43us; 48us; 43us; 49us; 43us; 59us; 43us; 60us; 43us; 61us; 43us; 65us; 43us; 69us; 43us; 73us; 43us; 76us; 43us; 85us; 43us; 88us; 43us; 113us; 43us; 118us; 43us; 22us; 65535us; 0us; 47us; 25us; 47us; 26us; 47us; 31us; 47us; 32us; 47us; 33us; 47us; 34us; 47us; 35us; 47us; 36us; 47us; 48us; 47us; 49us; 47us; 59us; 47us; 60us; 47us; 61us; 47us; 65us; 47us; 69us; 47us; 73us; 47us; 76us; 47us; 85us; 47us; 88us; 47us; 113us; 47us; 118us; 47us; 22us; 65535us; 0us; 63us; 25us; 63us; 26us; 63us; 31us; 63us; 32us; 63us; 33us; 63us; 34us; 63us; 35us; 63us; 36us; 63us; 48us; 63us; 49us; 63us; 59us; 63us; 60us; 63us; 61us; 63us; 65us; 63us; 69us; 63us; 73us; 63us; 76us; 63us; 85us; 63us; 88us; 63us; 113us; 63us; 118us; 63us; 22us; 65535us; 0us; 64us; 25us; 64us; 26us; 64us; 31us; 64us; 32us; 64us; 33us; 64us; 34us; 64us; 35us; 64us; 36us; 64us; 48us; 64us; 49us; 64us; 59us; 64us; 60us; 64us; 61us; 64us; 65us; 64us; 69us; 64us; 73us; 64us; 76us; 64us; 85us; 64us; 88us; 64us; 113us; 64us; 118us; 64us; 1us; 65535us; 65us; 66us; 22us; 65535us; 0us; 44us; 25us; 44us; 26us; 44us; 31us; 44us; 32us; 44us; 33us; 44us; 34us; 44us; 35us; 44us; 36us; 44us; 48us; 44us; 49us; 44us; 59us; 44us; 60us; 44us; 61us; 44us; 65us; 44us; 69us; 44us; 73us; 44us; 76us; 44us; 85us; 44us; 88us; 44us; 113us; 44us; 118us; 44us; 2us; 65535us; 69us; 75us; 73us; 74us; 1us; 65535us; 69us; 70us; 2us; 65535us; 69us; 72us; 73us; 72us; 22us; 65535us; 0us; 45us; 25us; 45us; 26us; 45us; 31us; 45us; 32us; 45us; 33us; 45us; 34us; 45us; 35us; 45us; 36us; 45us; 48us; 45us; 49us; 45us; 59us; 45us; 60us; 45us; 61us; 45us; 65us; 45us; 69us; 45us; 73us; 45us; 76us; 45us; 85us; 45us; 88us; 45us; 113us; 45us; 118us; 45us; 1us; 65535us; 77us; 78us; 2us; 65535us; 77us; 80us; 82us; 83us; 2us; 65535us; 77us; 81us; 82us; 81us; 2us; 65535us; 77us; 84us; 82us; 84us; 22us; 65535us; 0us; 46us; 25us; 46us; 26us; 46us; 31us; 46us; 32us; 46us; 33us; 46us; 34us; 46us; 35us; 46us; 36us; 46us; 48us; 46us; 49us; 46us; 59us; 46us; 60us; 46us; 61us; 46us; 65us; 46us; 69us; 46us; 73us; 46us; 76us; 46us; 85us; 46us; 88us; 46us; 113us; 46us; 118us; 46us; 1us; 65535us; 88us; 89us; 1us; 65535us; 61us; 93us; 1us; 65535us; 61us; 87us; 2us; 65535us; 61us; 90us; 95us; 96us; 2us; 65535us; 91us; 92us; 98us; 99us; 2us; 65535us; 91us; 97us; 98us; 97us; 3us; 65535us; 61us; 94us; 95us; 94us; 100us; 101us; 0us; 65535us; 2us; 65535us; 55us; 103us; 102us; 103us; 2us; 65535us; 55us; 104us; 102us; 104us; 3us; 65535us; 27us; 28us; 29us; 30us; 105us; 106us; 3us; 65535us; 27us; 107us; 29us; 107us; 105us; 107us; 1us; 65535us; 107us; 108us; 22us; 65535us; 0us; 39us; 25us; 39us; 26us; 39us; 31us; 39us; 32us; 39us; 33us; 39us; 34us; 39us; 35us; 39us; 36us; 39us; 48us; 39us; 49us; 39us; 59us; 39us; 60us; 39us; 61us; 39us; 65us; 39us; 69us; 39us; 73us; 39us; 76us; 39us; 85us; 39us; 88us; 39us; 113us; 39us; 118us; 39us; 2us; 65535us; 111us; 112us; 115us; 116us; 2us; 65535us; 111us; 114us; 115us; 114us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 26us; 49us; 72us; 95us; 118us; 119us; 120us; 121us; 122us; 145us; 167us; 190us; 213us; 236us; 259us; 282us; 284us; 307us; 310us; 312us; 315us; 338us; 340us; 343us; 346us; 349us; 372us; 374us; 376us; 378us; 381us; 384us; 387us; 391us; 392us; 395us; 398us; 402us; 406us; 408us; 431us; 434us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 15us; 1us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 1us; 1us; 1us; 2us; 15us; 3us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 15us; 3us; 4us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 15us; 3us; 4us; 5us; 6us; 7us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 12us; 58us; 61us; 65us; 66us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 12us; 58us; 61us; 65us; 66us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 24us; 58us; 61us; 65us; 66us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 25us; 58us; 61us; 65us; 66us; 16us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 59us; 60us; 61us; 65us; 66us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 61us; 65us; 66us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 62us; 65us; 66us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 67us; 16us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 73us; 74us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 74us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 80us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 83us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 103us; 15us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 12us; 58us; 61us; 65us; 66us; 106us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 30us; 2us; 30us; 93us; 1us; 31us; 1us; 58us; 2us; 58us; 60us; 2us; 59us; 60us; 1us; 61us; 2us; 62us; 82us; 1us; 62us; 1us; 63us; 1us; 64us; 2us; 65us; 66us; 2us; 65us; 66us; 2us; 65us; 66us; 1us; 66us; 1us; 68us; 1us; 68us; 1us; 68us; 2us; 69us; 70us; 1us; 70us; 1us; 70us; 1us; 72us; 1us; 74us; 1us; 75us; 1us; 75us; 1us; 75us; 1us; 77us; 2us; 78us; 79us; 1us; 79us; 1us; 79us; 1us; 80us; 1us; 80us; 1us; 81us; 1us; 82us; 1us; 82us; 1us; 82us; 2us; 84us; 85us; 1us; 85us; 1us; 85us; 1us; 87us; 2us; 88us; 89us; 1us; 89us; 1us; 89us; 2us; 90us; 91us; 1us; 91us; 1us; 91us; 1us; 92us; 1us; 92us; 1us; 93us; 1us; 93us; 1us; 97us; 1us; 98us; 1us; 98us; 1us; 99us; 1us; 99us; 1us; 101us; 1us; 102us; 1us; 103us; 1us; 103us; 1us; 103us; 2us; 104us; 105us; 1us; 105us; 1us; 105us; 1us; 106us; 1us; 106us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 20us; 22us; 24us; 40us; 56us; 72us; 88us; 104us; 120us; 136us; 152us; 168us; 184us; 201us; 217us; 233us; 249us; 266us; 282us; 298us; 314us; 330us; 346us; 348us; 350us; 352us; 354us; 356us; 358us; 360us; 362us; 364us; 366us; 368us; 370us; 372us; 374us; 376us; 378us; 380us; 382us; 384us; 386us; 388us; 390us; 392us; 394us; 396us; 398us; 400us; 402us; 404us; 406us; 409us; 411us; 413us; 416us; 419us; 421us; 424us; 426us; 428us; 430us; 433us; 436us; 439us; 441us; 443us; 445us; 447us; 450us; 452us; 454us; 456us; 458us; 460us; 462us; 464us; 466us; 469us; 471us; 473us; 475us; 477us; 479us; 481us; 483us; 485us; 488us; 490us; 492us; 494us; 497us; 499us; 501us; 504us; 506us; 508us; 510us; 512us; 514us; 516us; 518us; 520us; 522us; 524us; 526us; 528us; 530us; 532us; 534us; 536us; 539us; 541us; 543us; 545us; |]
let _fsyacc_action_rows = 119
let _fsyacc_actionTableElements = [|12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 0us; 49152us; 14us; 32768us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 53us; 3us; 57us; 59us; 0us; 16385us; 0us; 16386us; 13us; 16387us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 8us; 16388us; 15us; 25us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 50us; 33us; 51us; 34us; 52us; 35us; 10us; 16391us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 9us; 16392us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 50us; 33us; 51us; 34us; 52us; 35us; 13us; 16393us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 7us; 16394us; 15us; 25us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 50us; 33us; 52us; 35us; 6us; 16395us; 15us; 25us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 50us; 33us; 13us; 16396us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 7us; 16408us; 15us; 25us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 50us; 33us; 52us; 35us; 13us; 16409us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 11us; 16443us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 12us; 16445us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 14us; 32768us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 41us; 62us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 13us; 16451us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 14us; 16457us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 39us; 76us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 13us; 16458us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 13us; 16464us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 13us; 16467us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 13us; 16487us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 13us; 16490us; 15us; 25us; 23us; 26us; 27us; 29us; 31us; 27us; 33us; 36us; 42us; 65us; 47us; 60us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 34us; 52us; 35us; 57us; 59us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 1us; 16484us; 13us; 109us; 0us; 16389us; 1us; 16484us; 13us; 109us; 0us; 16390us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 0us; 16407us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 0us; 16413us; 0us; 16414us; 3us; 16414us; 27us; 105us; 36us; 16480us; 46us; 16480us; 0us; 16415us; 0us; 16442us; 0us; 16442us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 12us; 16470us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 55us; 58us; 50us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 1us; 32768us; 43us; 67us; 1us; 16449us; 35us; 68us; 0us; 16450us; 12us; 16455us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 1us; 32768us; 43us; 71us; 0us; 16452us; 1us; 16453us; 46us; 73us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 0us; 16454us; 0us; 16456us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 1us; 16460us; 55us; 86us; 1us; 32768us; 45us; 79us; 0us; 16459us; 0us; 16461us; 1us; 16462us; 46us; 82us; 1us; 32768us; 55us; 86us; 0us; 16463us; 1us; 32768us; 48us; 85us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 0us; 16465us; 1us; 32768us; 36us; 88us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 0us; 16466us; 1us; 16468us; 46us; 91us; 1us; 32768us; 14us; 100us; 0us; 16469us; 0us; 16471us; 1us; 16472us; 46us; 95us; 1us; 32768us; 55us; 102us; 0us; 16473us; 1us; 16474us; 46us; 98us; 1us; 32768us; 14us; 100us; 0us; 16475us; 1us; 32768us; 55us; 102us; 0us; 16476us; 1us; 16480us; 27us; 105us; 0us; 16477us; 0us; 16481us; 1us; 16484us; 13us; 109us; 0us; 16482us; 1us; 32768us; 0us; 110us; 0us; 16483us; 0us; 16485us; 0us; 16486us; 1us; 32768us; 55us; 117us; 1us; 32768us; 30us; 113us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; 1us; 16488us; 46us; 115us; 1us; 32768us; 55us; 117us; 0us; 16489us; 1us; 32768us; 48us; 118us; 12us; 32768us; 12us; 53us; 20us; 51us; 28us; 52us; 32us; 111us; 34us; 49us; 40us; 61us; 42us; 69us; 44us; 77us; 51us; 48us; 54us; 56us; 55us; 54us; 58us; 50us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 13us; 14us; 29us; 30us; 31us; 45us; 54us; 65us; 75us; 89us; 97us; 104us; 118us; 126us; 140us; 152us; 165us; 180us; 194us; 209us; 223us; 237us; 251us; 265us; 279us; 292us; 305us; 307us; 308us; 310us; 311us; 324us; 337us; 350us; 363us; 376us; 389us; 390us; 391us; 392us; 393us; 394us; 395us; 396us; 397us; 398us; 399us; 400us; 413us; 426us; 427us; 428us; 429us; 430us; 431us; 435us; 436us; 437us; 438us; 451us; 464us; 477us; 478us; 479us; 480us; 493us; 495us; 497us; 498us; 511us; 513us; 514us; 516us; 529us; 530us; 531us; 544us; 546us; 548us; 549us; 550us; 552us; 554us; 555us; 557us; 570us; 571us; 573us; 586us; 587us; 589us; 591us; 592us; 593us; 595us; 597us; 598us; 600us; 602us; 603us; 605us; 606us; 608us; 609us; 610us; 612us; 613us; 615us; 616us; 617us; 618us; 620us; 622us; 635us; 637us; 639us; 640us; 642us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 3us; 3us; 1us; 1us; 4us; 5us; 1us; 3us; 1us; 3us; 0us; 1us; 1us; 3us; 3us; 0us; 1us; 1us; 3us; 3us; 1us; 4us; 1us; 1us; 3us; 0us; 1us; 1us; 3us; 1us; 3us; 2us; 2us; 0us; 1us; 0us; 1us; 2us; 2us; 0us; 1us; 1us; 4us; 1us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 10us; 11us; 12us; 12us; 13us; 14us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 24us; 24us; 25us; 25us; 26us; 27us; 28us; 29us; 30us; 30us; 31us; 31us; 32us; 32us; 33us; 33us; 34us; 35us; 36us; 36us; 37us; 37us; 38us; 39us; 40us; 40us; 41us; 42us; 43us; 43us; 44us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16397us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; 16404us; 16405us; 16406us; 16407us; 65535us; 65535us; 16410us; 16411us; 16412us; 16413us; 16414us; 65535us; 16415us; 16442us; 65535us; 65535us; 65535us; 65535us; 16446us; 16447us; 16448us; 65535us; 65535us; 65535us; 16450us; 65535us; 65535us; 16452us; 65535us; 65535us; 16454us; 16456us; 65535us; 65535us; 65535us; 16459us; 16461us; 65535us; 65535us; 16463us; 65535us; 65535us; 16465us; 65535us; 65535us; 16466us; 65535us; 65535us; 16469us; 16471us; 65535us; 65535us; 16473us; 65535us; 65535us; 16475us; 65535us; 16476us; 65535us; 16477us; 16481us; 65535us; 16482us; 65535us; 16483us; 16485us; 16486us; 65535us; 65535us; 65535us; 65535us; 65535us; 16489us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 592 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startparse));
# 601 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                            
                             boilerplate + _1 
                           
                   )
# 89 "Parser.fsy"
                 : string));
# 614 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression_a in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                          printfn "exp.(%s)" _1; _1 
                   )
# 94 "Parser.fsy"
                 : 'gentype_expression));
# 625 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                       $"{_1}{_2}{_3}" 
                   )
# 97 "Parser.fsy"
                 : 'gentype_expression_a));
# 638 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                        $"{_1}{_2}{_3}" 
                   )
# 98 "Parser.fsy"
                 : 'gentype_expression_a));
# 651 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_nullable_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                                    $"{_1}{_2}{_3}" 
                   )
# 99 "Parser.fsy"
                 : 'gentype_expression_a));
# 664 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_nullable_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                                    $"{_1}{_2}{_3}" 
                   )
# 100 "Parser.fsy"
                 : 'gentype_expression_a));
# 677 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                       printfn "eq exp.(%s)" $"{_1}{_2}{_3}"; $"{_1}{_2}{_3}" 
                   )
# 101 "Parser.fsy"
                 : 'gentype_expression_a));
# 690 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                       $"{_1}{_2}{_3}" 
                   )
# 102 "Parser.fsy"
                 : 'gentype_expression_a));
# 703 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                                        $"{_1}{_2}{_3}" 
                   )
# 103 "Parser.fsy"
                 : 'gentype_expression_a));
# 716 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                                      $"{_1}{_2}{_3}" 
                   )
# 104 "Parser.fsy"
                 : 'gentype_expression_a));
# 729 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                                             $"{_1}{_2}{_3}" 
                   )
# 105 "Parser.fsy"
                 : 'gentype_expression_a));
# 742 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                         $"{_1}{_2}{_3}" 
                   )
# 106 "Parser.fsy"
                 : 'gentype_expression_a));
# 755 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_unary_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                               _1 
                   )
# 107 "Parser.fsy"
                 : 'gentype_expression_a));
# 766 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_literal_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                                 _1 
                   )
# 108 "Parser.fsy"
                 : 'gentype_expression_a));
# 777 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_let_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                             _1 
                   )
# 109 "Parser.fsy"
                 : 'gentype_expression_a));
# 788 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_identifier_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                    _1 
                   )
# 110 "Parser.fsy"
                 : 'gentype_expression_a));
# 799 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_invoke_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                                _1 
                   )
# 111 "Parser.fsy"
                 : 'gentype_expression_a));
# 810 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_forward_pipeline_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                          _1 
                   )
# 112 "Parser.fsy"
                 : 'gentype_expression_a));
# 821 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parenthesized_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                       _1 
                   )
# 113 "Parser.fsy"
                 : 'gentype_expression_a));
# 832 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_list_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                              _1 
                   )
# 114 "Parser.fsy"
                 : 'gentype_expression_a));
# 843 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_record_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                _1 
                   )
# 115 "Parser.fsy"
                 : 'gentype_expression_a));
# 854 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_function_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                  _1 
                   )
# 116 "Parser.fsy"
                 : 'gentype_expression_a));
# 865 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_item_access_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                     _1 
                   )
# 117 "Parser.fsy"
                 : 'gentype_expression_a));
# 876 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                                           $"{_1}{_2}" 
                   )
# 121 "Parser.fsy"
                 : 'gentype_unary_expression));
# 888 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                             $"{_1}{_2}" 
                   )
# 122 "Parser.fsy"
                 : 'gentype_unary_expression));
# 900 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                     printfn "literal exp.(%s)" _1; _1 
                   )
# 125 "Parser.fsy"
                 : 'gentype_literal_expression));
# 911 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                  _1 
                   )
# 126 "Parser.fsy"
                 : 'gentype_literal_expression));
# 922 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                   _1 
                   )
# 127 "Parser.fsy"
                 : 'gentype_literal_expression));
# 933 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                  _1 
                   )
# 128 "Parser.fsy"
                 : 'gentype_literal_expression));
# 944 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                        printfn "identifier exp(%s)" _1; _1 
                   )
# 132 "Parser.fsy"
                 : 'gentype_identifier_expression));
# 955 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                   $"Usagi_Nakamura.Curry({_1})" 
                   )
# 133 "Parser.fsy"
                 : 'gentype_identifier_expression));
# 966 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_generalized_identifier_segment in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                                          _1 
                   )
# 136 "Parser.fsy"
                 : 'gentype_generalized_identifier_part));
# 977 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_keyword_or_identifier in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                    _1 
                   )
# 139 "Parser.fsy"
                 : 'gentype_generalized_identifier_segment));
# 988 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_keyword_or_identifier in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_keyword_or_identifier in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                                              $"{_1}{_2}{_3}" 
                   )
# 140 "Parser.fsy"
                 : 'gentype_generalized_identifier_segment));
# 1001 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                        _1 
                   )
# 143 "Parser.fsy"
                 : 'gentype_keyword_or_identifier));
# 1012 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_keyword_not_starting_hash in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                                       _1 
                   )
# 144 "Parser.fsy"
                 : 'gentype_keyword_or_identifier));
# 1023 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                 _1 
                   )
# 147 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1034 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                _1 
                   )
# 148 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1045 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                  _1 
                   )
# 149 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1056 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                  _1 
                   )
# 150 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1067 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                   _1 
                   )
# 151 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1078 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                   _1 
                   )
# 152 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1089 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                _1 
                   )
# 153 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1100 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                _1 
                   )
# 154 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1111 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                _1 
                   )
# 155 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1122 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                 _1 
                   )
# 156 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1133 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                  _1 
                   )
# 157 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1144 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                 _1 
                   )
# 158 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1155 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                  _1 
                   )
# 159 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1166 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                _1 
                   )
# 160 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1177 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                       _1
                   )
# 161 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1188 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                     _1 
                   )
# 162 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1199 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                    _1 
                   )
# 163 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1210 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                  _1 
                   )
# 164 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1221 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                  _1 
                   )
# 165 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1232 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                 _1 
                   )
# 166 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1243 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                  _1 
                   )
# 167 "Parser.fsy"
                 : 'gentype_keyword_not_starting_hash));
# 1254 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> 'gentype_invoke_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                            printfn "invoke exp.(%s)" $"{_1}{_2}"; $"{_1}{_2}" 
                   )
# 170 "Parser.fsy"
                 : 'gentype_invoke_expression));
# 1266 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                   $"({_2})" 
                   )
# 173 "Parser.fsy"
                 : 'gentype_invoke_parameter_list));
# 1278 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_invoke_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                                         $"({_2}){_3}" 
                   )
# 174 "Parser.fsy"
                 : 'gentype_invoke_parameter_list));
# 1291 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                                                           $"{_3}({_1})" 
                   )
# 177 "Parser.fsy"
                 : 'gentype_forward_pipeline_expression));
# 1304 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                                                              $"{_1}{_2}{_3}" 
                   )
# 180 "Parser.fsy"
                 : 'gentype_parenthesized_expression));
# 1317 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_item_selection in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "Parser.fsy"
                                            _1 
                   )
# 188 "Parser.fsy"
                 : 'gentype_item_access_expression));
# 1328 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optional_item_selection in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                                     _1 
                   )
# 189 "Parser.fsy"
                 : 'gentype_item_access_expression));
# 1339 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_item_selector in
            let _4 = parseState.GetInput(4) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                                                                  $"{_1}{_2}{_3}{_4}"
                   )
# 191 "Parser.fsy"
                 : 'gentype_item_selection));
# 1353 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_item_selector in
            let _4 = parseState.GetInput(4) :?> string in
            let _5 = parseState.GetInput(5) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                             $"{_1}{_2}{_3}{_4}{_5}"
                   )
# 194 "Parser.fsy"
                 : 'gentype_optional_item_selection));
# 1368 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                         _1 
                   )
# 196 "Parser.fsy"
                 : 'gentype_item_selector));
# 1379 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_item_list_opt in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                                                     $"{_1}{_2}{_3}" 
                   )
# 203 "Parser.fsy"
                 : 'gentype_list_expression));
# 1392 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_item in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                                  _1 
                   )
# 206 "Parser.fsy"
                 : 'gentype_item_list));
# 1403 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_item in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_item_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                                  $"{_1}{_2}{_3}" 
                   )
# 207 "Parser.fsy"
                 : 'gentype_item_list));
# 1416 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "Parser.fsy"
                                         "" 
                   )
# 210 "Parser.fsy"
                 : 'gentype_item_list_opt));
# 1426 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_item_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 211 "Parser.fsy"
                                       _1 
                   )
# 211 "Parser.fsy"
                 : 'gentype_item_list_opt));
# 1437 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "Parser.fsy"
                                        _1 
                   )
# 214 "Parser.fsy"
                 : 'gentype_item));
# 1448 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "Parser.fsy"
                                                          $"{_1}{_2}{_3}" 
                   )
# 215 "Parser.fsy"
                 : 'gentype_item));
# 1461 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_field_list_opt in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 222 "Parser.fsy"
                                                                                           $"{_1}{_2}{_3}" 
                   )
# 222 "Parser.fsy"
                 : 'gentype_record_expression));
# 1474 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "Parser.fsy"
                                         "" 
                   )
# 225 "Parser.fsy"
                 : 'gentype_field_list_opt));
# 1484 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 226 "Parser.fsy"
                                         _1 
                   )
# 226 "Parser.fsy"
                 : 'gentype_field_list_opt));
# 1495 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "Parser.fsy"
                                    _1 
                   )
# 229 "Parser.fsy"
                 : 'gentype_field_list));
# 1506 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_field_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "Parser.fsy"
                                                     $"{_1}{_2}{_3}" 
                   )
# 230 "Parser.fsy"
                 : 'gentype_field_list));
# 1519 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field_name in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "Parser.fsy"
                                                      $"{_1}{_2}{_3}" 
                   )
# 233 "Parser.fsy"
                 : 'gentype_field));
# 1532 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 236 "Parser.fsy"
                                        _1 
                   )
# 236 "Parser.fsy"
                 : 'gentype_field_name));
# 1543 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_parameter_list_opt in
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_function_body in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "Parser.fsy"
                             $"{_1}{_2}{_3}{_4}" 
                   )
# 244 "Parser.fsy"
                 : 'gentype_function_expression));
# 1557 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "Parser.fsy"
                                      _1 
                   )
# 247 "Parser.fsy"
                 : 'gentype_function_body));
# 1568 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fixed_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "Parser.fsy"
                                                  _1 
                   )
# 250 "Parser.fsy"
                 : 'gentype_parameter_list));
# 1579 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fixed_parameter_list in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_optional_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "Parser.fsy"
                                                                                $"{_1}{_2}{_3}" 
                   )
# 251 "Parser.fsy"
                 : 'gentype_parameter_list));
# 1592 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 254 "Parser.fsy"
                                         "" 
                   )
# 254 "Parser.fsy"
                 : 'gentype_parameter_list_opt));
# 1602 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "Parser.fsy"
                                            _1 
                   )
# 255 "Parser.fsy"
                 : 'gentype_parameter_list_opt));
# 1613 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parameter in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "Parser.fsy"
                                       _1 
                   )
# 258 "Parser.fsy"
                 : 'gentype_fixed_parameter_list));
# 1624 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parameter in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_fixed_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 259 "Parser.fsy"
                                                                  $"{_1}{_2}{_3}" 
                   )
# 259 "Parser.fsy"
                 : 'gentype_fixed_parameter_list));
# 1637 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optional_parameter in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 262 "Parser.fsy"
                                                 _1 
                   )
# 262 "Parser.fsy"
                 : 'gentype_optional_parameter_list));
# 1648 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optional_parameter in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_optional_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 263 "Parser.fsy"
                                                                               $"{_1}{_2}{_3}" 
                   )
# 263 "Parser.fsy"
                 : 'gentype_optional_parameter_list));
# 1661 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_parameter in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 266 "Parser.fsy"
                                                $"{_1}{_2}" 
                   )
# 266 "Parser.fsy"
                 : 'gentype_optional_parameter));
# 1673 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_parameter_type_opt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 269 "Parser.fsy"
                                                           $"{_1}{_2}" 
                   )
# 269 "Parser.fsy"
                 : 'gentype_parameter));
# 1685 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 272 "Parser.fsy"
                                         "" 
                   )
# 272 "Parser.fsy"
                 : 'gentype_return_type_opt));
# 1695 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_assertion in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 273 "Parser.fsy"
                                       _1 
                   )
# 273 "Parser.fsy"
                 : 'gentype_return_type_opt));
# 1706 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 276 "Parser.fsy"
                                         "" 
                   )
# 276 "Parser.fsy"
                 : 'gentype_parameter_type_opt));
# 1716 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_assertion in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 277 "Parser.fsy"
                                       _1 
                   )
# 277 "Parser.fsy"
                 : 'gentype_parameter_type_opt));
# 1727 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_nullable_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 280 "Parser.fsy"
                                                      $"{_1}{_2}" 
                   )
# 280 "Parser.fsy"
                 : 'gentype_assertion));
# 1739 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_nullable_opt in
            let _2 = parseState.GetInput(2) :?> 'gentype_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 283 "Parser.fsy"
                                                         $"{_1}{_2}" 
                   )
# 283 "Parser.fsy"
                 : 'gentype_nullable_primitive_type));
# 1751 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 286 "Parser.fsy"
                                         "" 
                   )
# 286 "Parser.fsy"
                 : 'gentype_nullable_opt));
# 1761 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 287 "Parser.fsy"
                                      _1 
                   )
# 287 "Parser.fsy"
                 : 'gentype_nullable_opt));
# 1772 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 290 "Parser.fsy"
                                                                 _1 
                   )
# 290 "Parser.fsy"
                 : 'gentype_primitive_type));
# 1783 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_variable_list in
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 298 "Parser.fsy"
                             printfn "pass"; $"{_1}{_2}{_3}{_4}" 
                   )
# 298 "Parser.fsy"
                 : 'gentype_let_expression));
# 1797 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 301 "Parser.fsy"
                                      _1 
                   )
# 301 "Parser.fsy"
                 : 'gentype_variable_list));
# 1808 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_variable_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 302 "Parser.fsy"
                                                          $"{_1}{_2}{_3}" 
                   )
# 302 "Parser.fsy"
                 : 'gentype_variable_list));
# 1821 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 305 "Parser.fsy"
                                                      printfn "variable(%s)" $"{_1}{_2}{_3}"; $"{_1}{_2}{_3}" 
                   )
# 305 "Parser.fsy"
                 : 'gentype_variable));
|]
# 1835 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 62;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let parse lexer lexbuf : string =
    engine lexer lexbuf 0 :?> _
