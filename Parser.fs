// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


let (++) (str1: string) (str2: string) = str1 + "\n" + str2

let boilerplate = 
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "// Start of Boilerplate" ++
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "let" ++
    "    Usagi_Nakamura.Curry = (f as function) =>" ++
    "        let" ++
    "            arity = Record.FieldCount(Type.FunctionParameters(Value.Type(f)))," ++
    "            ApplyTo =" ++
    "                (args as list) =>" ++
    "                    if List.Count(args) >= arity then" ++
    "                        Function.Invoke(f, args)" ++
    "                    else" ++
    "                        (x as any) =>" ++
    "                        if List.Count(args) = arity - 1" ++
    "                        then @ApplyTo({x} & args)" ++
    "                        else @ApplyTo(args & {x})" ++
    "    in" ++
    "        ApplyTo({})" ++
    "in" ++
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "// End of Boilerplate" ++
    "///////////////////////////////////////////////////////////////////////////////////" ++
    "\n\n"    


# 37 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE of (string)
  | HASH_SHARED of (string)
  | HASH_TABLE of (string)
  | HASH_TIME of (string)
  | HASH_DURATION of (string)
  | HASH_INFINITY of (string)
  | HASH_NAN of (string)
  | HASH_SECTION of (string)
  | HASH_BINARY of (string)
  | HASH_DATE of (string)
  | HASH_DATETIME of (string)
  | HASH_DATETIMEZONE of (string)
  | NULL of (string)
  | NULLABLE of (string)
  | OPTIONAL of (string)
  | OR of (string)
  | OTHERWISE of (string)
  | SECTION of (string)
  | SHARED of (string)
  | THEN of (string)
  | TRUE of (string)
  | TRY of (string)
  | TYPE of (string)
  | AND of (string)
  | EACH of (string)
  | ELSE of (string)
  | ERROR of (string)
  | AS of (string)
  | FALSE of (string)
  | IF of (string)
  | IN of (string)
  | IS of (string)
  | LET of (string)
  | META of (string)
  | NOT of (string)
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR of (string)
  | FUNCTION_OPERATOR of (string)
  | DOTDOT of (string)
  | OPENING_PARENTHESIS of (string)
  | CLOSING_PARENTHESIS of (string)
  | OPENING_BRACE of (string)
  | CLOSING_BRACE of (string)
  | OPENING_SQUARE_BRACKET of (string)
  | CLOSING_SQUARE_BRACKET of (string)
  | COMMA of (string)
  | FORWARD_PIPELINE_OPERATOR of (string)
  | EQ of (string)
  | NE of (string)
  | RELATIONAL_OPERATOR of (string)
  | ADDITIVE_OPERATOR of (string)
  | MULTIPLICATIVE_OPERATOR of (string)
  | EOF
  | IDENTIFIER_WITH_PRIME of (string)
  | IDENTIFIER of (string)
  | APPLICATION of (string)
  | WHITESPACE of (string)
  | LITERAL of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE
    | TOKEN_HASH_SHARED
    | TOKEN_HASH_TABLE
    | TOKEN_HASH_TIME
    | TOKEN_HASH_DURATION
    | TOKEN_HASH_INFINITY
    | TOKEN_HASH_NAN
    | TOKEN_HASH_SECTION
    | TOKEN_HASH_BINARY
    | TOKEN_HASH_DATE
    | TOKEN_HASH_DATETIME
    | TOKEN_HASH_DATETIMEZONE
    | TOKEN_NULL
    | TOKEN_NULLABLE
    | TOKEN_OPTIONAL
    | TOKEN_OR
    | TOKEN_OTHERWISE
    | TOKEN_SECTION
    | TOKEN_SHARED
    | TOKEN_THEN
    | TOKEN_TRUE
    | TOKEN_TRY
    | TOKEN_TYPE
    | TOKEN_AND
    | TOKEN_EACH
    | TOKEN_ELSE
    | TOKEN_ERROR
    | TOKEN_AS
    | TOKEN_FALSE
    | TOKEN_IF
    | TOKEN_IN
    | TOKEN_IS
    | TOKEN_LET
    | TOKEN_META
    | TOKEN_NOT
    | TOKEN_CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR
    | TOKEN_FUNCTION_OPERATOR
    | TOKEN_DOTDOT
    | TOKEN_OPENING_PARENTHESIS
    | TOKEN_CLOSING_PARENTHESIS
    | TOKEN_OPENING_BRACE
    | TOKEN_CLOSING_BRACE
    | TOKEN_OPENING_SQUARE_BRACKET
    | TOKEN_CLOSING_SQUARE_BRACKET
    | TOKEN_COMMA
    | TOKEN_FORWARD_PIPELINE_OPERATOR
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_RELATIONAL_OPERATOR
    | TOKEN_ADDITIVE_OPERATOR
    | TOKEN_MULTIPLICATIVE_OPERATOR
    | TOKEN_EOF
    | TOKEN_IDENTIFIER_WITH_PRIME
    | TOKEN_IDENTIFIER
    | TOKEN_APPLICATION
    | TOKEN_WHITESPACE
    | TOKEN_LITERAL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startparse
    | NONTERM_parse
    | NONTERM_expression
    | NONTERM_unary_expression
    | NONTERM_literal_expression
    | NONTERM_identifier_expression
    | NONTERM_invoke_expression
    | NONTERM_forward_pipeline_expression
    | NONTERM_parenthesized_expression
    | NONTERM_list_expression
    | NONTERM_item_list
    | NONTERM_item_list_opt
    | NONTERM_item
    | NONTERM_record_expression
    | NONTERM_field_list_opt
    | NONTERM_field_list
    | NONTERM_field
    | NONTERM_field_name
    | NONTERM_function_expression
    | NONTERM_function_body
    | NONTERM_parameter_list
    | NONTERM_parameter_list_opt
    | NONTERM_fixed_parameter_list
    | NONTERM_optional_parameter_list
    | NONTERM_optional_parameter
    | NONTERM_parameter
    | NONTERM_return_type_opt
    | NONTERM_parameter_type_opt
    | NONTERM_assertion
    | NONTERM_nullable_primitive_type
    | NONTERM_nullable_opt
    | NONTERM_primitive_type
    | NONTERM_let_expression
    | NONTERM_variable_list
    | NONTERM_variable
    | NONTERM_variable_name

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE _ -> 0 
  | HASH_SHARED _ -> 1 
  | HASH_TABLE _ -> 2 
  | HASH_TIME _ -> 3 
  | HASH_DURATION _ -> 4 
  | HASH_INFINITY _ -> 5 
  | HASH_NAN _ -> 6 
  | HASH_SECTION _ -> 7 
  | HASH_BINARY _ -> 8 
  | HASH_DATE _ -> 9 
  | HASH_DATETIME _ -> 10 
  | HASH_DATETIMEZONE _ -> 11 
  | NULL _ -> 12 
  | NULLABLE _ -> 13 
  | OPTIONAL _ -> 14 
  | OR _ -> 15 
  | OTHERWISE _ -> 16 
  | SECTION _ -> 17 
  | SHARED _ -> 18 
  | THEN _ -> 19 
  | TRUE _ -> 20 
  | TRY _ -> 21 
  | TYPE _ -> 22 
  | AND _ -> 23 
  | EACH _ -> 24 
  | ELSE _ -> 25 
  | ERROR _ -> 26 
  | AS _ -> 27 
  | FALSE _ -> 28 
  | IF _ -> 29 
  | IN _ -> 30 
  | IS _ -> 31 
  | LET _ -> 32 
  | META _ -> 33 
  | NOT _ -> 34 
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR _ -> 35 
  | FUNCTION_OPERATOR _ -> 36 
  | DOTDOT _ -> 37 
  | OPENING_PARENTHESIS _ -> 38 
  | CLOSING_PARENTHESIS _ -> 39 
  | OPENING_BRACE _ -> 40 
  | CLOSING_BRACE _ -> 41 
  | OPENING_SQUARE_BRACKET _ -> 42 
  | CLOSING_SQUARE_BRACKET _ -> 43 
  | COMMA _ -> 44 
  | FORWARD_PIPELINE_OPERATOR _ -> 45 
  | EQ _ -> 46 
  | NE _ -> 47 
  | RELATIONAL_OPERATOR _ -> 48 
  | ADDITIVE_OPERATOR _ -> 49 
  | MULTIPLICATIVE_OPERATOR _ -> 50 
  | EOF  -> 51 
  | IDENTIFIER_WITH_PRIME _ -> 52 
  | IDENTIFIER _ -> 53 
  | APPLICATION _ -> 54 
  | WHITESPACE _ -> 55 
  | LITERAL _ -> 56 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE 
  | 1 -> TOKEN_HASH_SHARED 
  | 2 -> TOKEN_HASH_TABLE 
  | 3 -> TOKEN_HASH_TIME 
  | 4 -> TOKEN_HASH_DURATION 
  | 5 -> TOKEN_HASH_INFINITY 
  | 6 -> TOKEN_HASH_NAN 
  | 7 -> TOKEN_HASH_SECTION 
  | 8 -> TOKEN_HASH_BINARY 
  | 9 -> TOKEN_HASH_DATE 
  | 10 -> TOKEN_HASH_DATETIME 
  | 11 -> TOKEN_HASH_DATETIMEZONE 
  | 12 -> TOKEN_NULL 
  | 13 -> TOKEN_NULLABLE 
  | 14 -> TOKEN_OPTIONAL 
  | 15 -> TOKEN_OR 
  | 16 -> TOKEN_OTHERWISE 
  | 17 -> TOKEN_SECTION 
  | 18 -> TOKEN_SHARED 
  | 19 -> TOKEN_THEN 
  | 20 -> TOKEN_TRUE 
  | 21 -> TOKEN_TRY 
  | 22 -> TOKEN_TYPE 
  | 23 -> TOKEN_AND 
  | 24 -> TOKEN_EACH 
  | 25 -> TOKEN_ELSE 
  | 26 -> TOKEN_ERROR 
  | 27 -> TOKEN_AS 
  | 28 -> TOKEN_FALSE 
  | 29 -> TOKEN_IF 
  | 30 -> TOKEN_IN 
  | 31 -> TOKEN_IS 
  | 32 -> TOKEN_LET 
  | 33 -> TOKEN_META 
  | 34 -> TOKEN_NOT 
  | 35 -> TOKEN_CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR 
  | 36 -> TOKEN_FUNCTION_OPERATOR 
  | 37 -> TOKEN_DOTDOT 
  | 38 -> TOKEN_OPENING_PARENTHESIS 
  | 39 -> TOKEN_CLOSING_PARENTHESIS 
  | 40 -> TOKEN_OPENING_BRACE 
  | 41 -> TOKEN_CLOSING_BRACE 
  | 42 -> TOKEN_OPENING_SQUARE_BRACKET 
  | 43 -> TOKEN_CLOSING_SQUARE_BRACKET 
  | 44 -> TOKEN_COMMA 
  | 45 -> TOKEN_FORWARD_PIPELINE_OPERATOR 
  | 46 -> TOKEN_EQ 
  | 47 -> TOKEN_NE 
  | 48 -> TOKEN_RELATIONAL_OPERATOR 
  | 49 -> TOKEN_ADDITIVE_OPERATOR 
  | 50 -> TOKEN_MULTIPLICATIVE_OPERATOR 
  | 51 -> TOKEN_EOF 
  | 52 -> TOKEN_IDENTIFIER_WITH_PRIME 
  | 53 -> TOKEN_IDENTIFIER 
  | 54 -> TOKEN_APPLICATION 
  | 55 -> TOKEN_WHITESPACE 
  | 56 -> TOKEN_LITERAL 
  | 59 -> TOKEN_end_of_input
  | 57 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startparse 
    | 1 -> NONTERM_parse 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_expression 
    | 6 -> NONTERM_expression 
    | 7 -> NONTERM_expression 
    | 8 -> NONTERM_expression 
    | 9 -> NONTERM_expression 
    | 10 -> NONTERM_expression 
    | 11 -> NONTERM_expression 
    | 12 -> NONTERM_expression 
    | 13 -> NONTERM_expression 
    | 14 -> NONTERM_expression 
    | 15 -> NONTERM_expression 
    | 16 -> NONTERM_expression 
    | 17 -> NONTERM_expression 
    | 18 -> NONTERM_expression 
    | 19 -> NONTERM_expression 
    | 20 -> NONTERM_expression 
    | 21 -> NONTERM_expression 
    | 22 -> NONTERM_unary_expression 
    | 23 -> NONTERM_unary_expression 
    | 24 -> NONTERM_literal_expression 
    | 25 -> NONTERM_identifier_expression 
    | 26 -> NONTERM_identifier_expression 
    | 27 -> NONTERM_invoke_expression 
    | 28 -> NONTERM_forward_pipeline_expression 
    | 29 -> NONTERM_parenthesized_expression 
    | 30 -> NONTERM_list_expression 
    | 31 -> NONTERM_item_list 
    | 32 -> NONTERM_item_list 
    | 33 -> NONTERM_item_list_opt 
    | 34 -> NONTERM_item_list_opt 
    | 35 -> NONTERM_item 
    | 36 -> NONTERM_item 
    | 37 -> NONTERM_record_expression 
    | 38 -> NONTERM_field_list_opt 
    | 39 -> NONTERM_field_list_opt 
    | 40 -> NONTERM_field_list 
    | 41 -> NONTERM_field_list 
    | 42 -> NONTERM_field 
    | 43 -> NONTERM_field_name 
    | 44 -> NONTERM_function_expression 
    | 45 -> NONTERM_function_body 
    | 46 -> NONTERM_parameter_list 
    | 47 -> NONTERM_parameter_list 
    | 48 -> NONTERM_parameter_list_opt 
    | 49 -> NONTERM_parameter_list_opt 
    | 50 -> NONTERM_fixed_parameter_list 
    | 51 -> NONTERM_fixed_parameter_list 
    | 52 -> NONTERM_optional_parameter_list 
    | 53 -> NONTERM_optional_parameter_list 
    | 54 -> NONTERM_optional_parameter 
    | 55 -> NONTERM_parameter 
    | 56 -> NONTERM_return_type_opt 
    | 57 -> NONTERM_return_type_opt 
    | 58 -> NONTERM_parameter_type_opt 
    | 59 -> NONTERM_parameter_type_opt 
    | 60 -> NONTERM_assertion 
    | 61 -> NONTERM_nullable_primitive_type 
    | 62 -> NONTERM_nullable_opt 
    | 63 -> NONTERM_nullable_opt 
    | 64 -> NONTERM_primitive_type 
    | 65 -> NONTERM_let_expression 
    | 66 -> NONTERM_variable_list 
    | 67 -> NONTERM_variable_list 
    | 68 -> NONTERM_variable 
    | 69 -> NONTERM_variable_name 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 59 
let _fsyacc_tagOfErrorTerminal = 57

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE _ -> "PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE" 
  | HASH_SHARED _ -> "HASH_SHARED" 
  | HASH_TABLE _ -> "HASH_TABLE" 
  | HASH_TIME _ -> "HASH_TIME" 
  | HASH_DURATION _ -> "HASH_DURATION" 
  | HASH_INFINITY _ -> "HASH_INFINITY" 
  | HASH_NAN _ -> "HASH_NAN" 
  | HASH_SECTION _ -> "HASH_SECTION" 
  | HASH_BINARY _ -> "HASH_BINARY" 
  | HASH_DATE _ -> "HASH_DATE" 
  | HASH_DATETIME _ -> "HASH_DATETIME" 
  | HASH_DATETIMEZONE _ -> "HASH_DATETIMEZONE" 
  | NULL _ -> "NULL" 
  | NULLABLE _ -> "NULLABLE" 
  | OPTIONAL _ -> "OPTIONAL" 
  | OR _ -> "OR" 
  | OTHERWISE _ -> "OTHERWISE" 
  | SECTION _ -> "SECTION" 
  | SHARED _ -> "SHARED" 
  | THEN _ -> "THEN" 
  | TRUE _ -> "TRUE" 
  | TRY _ -> "TRY" 
  | TYPE _ -> "TYPE" 
  | AND _ -> "AND" 
  | EACH _ -> "EACH" 
  | ELSE _ -> "ELSE" 
  | ERROR _ -> "ERROR" 
  | AS _ -> "AS" 
  | FALSE _ -> "FALSE" 
  | IF _ -> "IF" 
  | IN _ -> "IN" 
  | IS _ -> "IS" 
  | LET _ -> "LET" 
  | META _ -> "META" 
  | NOT _ -> "NOT" 
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR _ -> "CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR" 
  | FUNCTION_OPERATOR _ -> "FUNCTION_OPERATOR" 
  | DOTDOT _ -> "DOTDOT" 
  | OPENING_PARENTHESIS _ -> "OPENING_PARENTHESIS" 
  | CLOSING_PARENTHESIS _ -> "CLOSING_PARENTHESIS" 
  | OPENING_BRACE _ -> "OPENING_BRACE" 
  | CLOSING_BRACE _ -> "CLOSING_BRACE" 
  | OPENING_SQUARE_BRACKET _ -> "OPENING_SQUARE_BRACKET" 
  | CLOSING_SQUARE_BRACKET _ -> "CLOSING_SQUARE_BRACKET" 
  | COMMA _ -> "COMMA" 
  | FORWARD_PIPELINE_OPERATOR _ -> "FORWARD_PIPELINE_OPERATOR" 
  | EQ _ -> "EQ" 
  | NE _ -> "NE" 
  | RELATIONAL_OPERATOR _ -> "RELATIONAL_OPERATOR" 
  | ADDITIVE_OPERATOR _ -> "ADDITIVE_OPERATOR" 
  | MULTIPLICATIVE_OPERATOR _ -> "MULTIPLICATIVE_OPERATOR" 
  | EOF  -> "EOF" 
  | IDENTIFIER_WITH_PRIME _ -> "IDENTIFIER_WITH_PRIME" 
  | IDENTIFIER _ -> "IDENTIFIER" 
  | APPLICATION _ -> "APPLICATION" 
  | WHITESPACE _ -> "WHITESPACE" 
  | LITERAL _ -> "LITERAL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | PRIMITIVE_TYPE_EXCEPT_NULL_AND_TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_SHARED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_TABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_TIME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DURATION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_INFINITY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_NAN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_SECTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_BINARY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DATE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DATETIME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH_DATETIMEZONE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NULL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NULLABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPTIONAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OTHERWISE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SECTION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | SHARED _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRUE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TRY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AND _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EACH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ELSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ERROR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FALSE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IF _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | META _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CLOSING_PARANTHESIS_FOLLOWED_BY_FUNCTION_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUNCTION_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOTDOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPENING_PARENTHESIS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CLOSING_PARENTHESIS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPENING_BRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CLOSING_BRACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPENING_SQUARE_BRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CLOSING_SQUARE_BRACKET _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FORWARD_PIPELINE_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RELATIONAL_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ADDITIVE_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MULTIPLICATIVE_OPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | IDENTIFIER_WITH_PRIME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | APPLICATION _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WHITESPACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LITERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 21us; 65535us; 0us; 2us; 23us; 4us; 24us; 5us; 29us; 6us; 30us; 7us; 31us; 8us; 32us; 9us; 33us; 10us; 34us; 11us; 45us; 12us; 46us; 13us; 51us; 14us; 52us; 15us; 53us; 16us; 55us; 17us; 59us; 17us; 62us; 18us; 71us; 19us; 74us; 20us; 99us; 21us; 104us; 22us; 21us; 65535us; 0us; 35us; 23us; 35us; 24us; 35us; 29us; 35us; 30us; 35us; 31us; 35us; 32us; 35us; 33us; 35us; 34us; 35us; 45us; 35us; 46us; 35us; 51us; 35us; 52us; 35us; 53us; 35us; 55us; 35us; 59us; 35us; 62us; 35us; 71us; 35us; 74us; 35us; 99us; 35us; 104us; 35us; 21us; 65535us; 0us; 36us; 23us; 36us; 24us; 36us; 29us; 36us; 30us; 36us; 31us; 36us; 32us; 36us; 33us; 36us; 34us; 36us; 45us; 36us; 46us; 36us; 51us; 36us; 52us; 36us; 53us; 36us; 55us; 36us; 59us; 36us; 62us; 36us; 71us; 36us; 74us; 36us; 99us; 36us; 104us; 36us; 21us; 65535us; 0us; 37us; 23us; 37us; 24us; 37us; 29us; 37us; 30us; 37us; 31us; 37us; 32us; 37us; 33us; 37us; 34us; 37us; 45us; 37us; 46us; 37us; 51us; 37us; 52us; 37us; 53us; 37us; 55us; 37us; 59us; 37us; 62us; 37us; 71us; 37us; 74us; 37us; 99us; 37us; 104us; 37us; 21us; 65535us; 0us; 38us; 23us; 38us; 24us; 38us; 29us; 38us; 30us; 38us; 31us; 38us; 32us; 38us; 33us; 38us; 34us; 38us; 45us; 38us; 46us; 38us; 51us; 38us; 52us; 38us; 53us; 38us; 55us; 38us; 59us; 38us; 62us; 38us; 71us; 38us; 74us; 38us; 99us; 38us; 104us; 38us; 21us; 65535us; 0us; 39us; 23us; 39us; 24us; 39us; 29us; 39us; 30us; 39us; 31us; 39us; 32us; 39us; 33us; 39us; 34us; 39us; 45us; 39us; 46us; 39us; 51us; 39us; 52us; 39us; 53us; 39us; 55us; 39us; 59us; 39us; 62us; 39us; 71us; 39us; 74us; 39us; 99us; 39us; 104us; 39us; 21us; 65535us; 0us; 40us; 23us; 40us; 24us; 40us; 29us; 40us; 30us; 40us; 31us; 40us; 32us; 40us; 33us; 40us; 34us; 40us; 45us; 40us; 46us; 40us; 51us; 40us; 52us; 40us; 53us; 40us; 55us; 40us; 59us; 40us; 62us; 40us; 71us; 40us; 74us; 40us; 99us; 40us; 104us; 40us; 21us; 65535us; 0us; 41us; 23us; 41us; 24us; 41us; 29us; 41us; 30us; 41us; 31us; 41us; 32us; 41us; 33us; 41us; 34us; 41us; 45us; 41us; 46us; 41us; 51us; 41us; 52us; 41us; 53us; 41us; 55us; 41us; 59us; 41us; 62us; 41us; 71us; 41us; 74us; 41us; 99us; 41us; 104us; 41us; 2us; 65535us; 55us; 61us; 59us; 60us; 1us; 65535us; 55us; 56us; 2us; 65535us; 55us; 58us; 59us; 58us; 21us; 65535us; 0us; 42us; 23us; 42us; 24us; 42us; 29us; 42us; 30us; 42us; 31us; 42us; 32us; 42us; 33us; 42us; 34us; 42us; 45us; 42us; 46us; 42us; 51us; 42us; 52us; 42us; 53us; 42us; 55us; 42us; 59us; 42us; 62us; 42us; 71us; 42us; 74us; 42us; 99us; 42us; 104us; 42us; 1us; 65535us; 63us; 64us; 2us; 65535us; 63us; 66us; 68us; 69us; 2us; 65535us; 63us; 67us; 68us; 67us; 2us; 65535us; 63us; 70us; 68us; 70us; 21us; 65535us; 0us; 43us; 23us; 43us; 24us; 43us; 29us; 43us; 30us; 43us; 31us; 43us; 32us; 43us; 33us; 43us; 34us; 43us; 45us; 43us; 46us; 43us; 51us; 43us; 52us; 43us; 53us; 43us; 55us; 43us; 59us; 43us; 62us; 43us; 71us; 43us; 74us; 43us; 99us; 43us; 104us; 43us; 1us; 65535us; 74us; 75us; 1us; 65535us; 53us; 79us; 1us; 65535us; 53us; 73us; 2us; 65535us; 53us; 76us; 81us; 82us; 2us; 65535us; 77us; 78us; 84us; 85us; 2us; 65535us; 77us; 83us; 84us; 83us; 3us; 65535us; 53us; 80us; 81us; 80us; 86us; 87us; 0us; 65535us; 2us; 65535us; 49us; 89us; 88us; 89us; 2us; 65535us; 49us; 90us; 88us; 90us; 3us; 65535us; 25us; 26us; 27us; 28us; 91us; 92us; 3us; 65535us; 25us; 93us; 27us; 93us; 91us; 93us; 1us; 65535us; 93us; 94us; 21us; 65535us; 0us; 44us; 23us; 44us; 24us; 44us; 29us; 44us; 30us; 44us; 31us; 44us; 32us; 44us; 33us; 44us; 34us; 44us; 45us; 44us; 46us; 44us; 51us; 44us; 52us; 44us; 53us; 44us; 55us; 44us; 59us; 44us; 62us; 44us; 71us; 44us; 74us; 44us; 99us; 44us; 104us; 44us; 2us; 65535us; 97us; 98us; 101us; 102us; 2us; 65535us; 97us; 100us; 101us; 100us; 2us; 65535us; 97us; 103us; 101us; 103us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 25us; 47us; 69us; 91us; 113us; 135us; 157us; 179us; 182us; 184us; 187us; 209us; 211us; 214us; 217us; 220us; 242us; 244us; 246us; 248us; 251us; 254us; 257us; 261us; 262us; 265us; 268us; 272us; 276us; 278us; 300us; 303us; 306us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 13us; 1us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 1us; 1us; 13us; 2us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 13us; 2us; 3us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 13us; 2us; 3us; 4us; 5us; 6us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 8us; 9us; 10us; 11us; 27us; 28us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 9us; 10us; 11us; 27us; 28us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 27us; 28us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 11us; 27us; 28us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 22us; 27us; 28us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 23us; 27us; 28us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 27us; 28us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 28us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 29us; 14us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 35us; 36us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 36us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 42us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 45us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 65us; 13us; 2us; 3us; 4us; 5us; 6us; 7us; 8us; 9us; 10us; 11us; 27us; 28us; 68us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 2us; 25us; 55us; 1us; 26us; 1us; 27us; 1us; 28us; 2us; 29us; 44us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 2us; 31us; 32us; 1us; 32us; 1us; 32us; 1us; 34us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 39us; 2us; 40us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 44us; 2us; 46us; 47us; 1us; 47us; 1us; 47us; 1us; 49us; 2us; 50us; 51us; 1us; 51us; 1us; 51us; 2us; 52us; 53us; 1us; 53us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 59us; 1us; 60us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 65us; 1us; 65us; 2us; 66us; 67us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 68us; 1us; 69us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 18us; 20us; 34us; 48us; 62us; 76us; 90us; 104us; 118us; 132us; 146us; 160us; 174us; 188us; 202us; 217us; 231us; 245us; 259us; 273us; 287us; 289us; 291us; 293us; 295us; 297us; 299us; 301us; 303us; 305us; 307us; 309us; 311us; 313us; 315us; 317us; 319us; 321us; 323us; 325us; 327us; 329us; 331us; 333us; 335us; 337us; 339us; 342us; 344us; 346us; 348us; 351us; 353us; 355us; 357us; 359us; 362us; 364us; 366us; 368us; 370us; 372us; 374us; 376us; 378us; 381us; 383us; 385us; 387us; 389us; 391us; 393us; 395us; 397us; 400us; 402us; 404us; 406us; 409us; 411us; 413us; 416us; 418us; 420us; 422us; 424us; 426us; 428us; 430us; 432us; 434us; 436us; 438us; 440us; 442us; 444us; 446us; 448us; 451us; 453us; 455us; 457us; 459us; |]
let _fsyacc_action_rows = 106
let _fsyacc_actionTableElements = [|9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 0us; 49152us; 13us; 32768us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 51us; 3us; 55us; 51us; 0us; 16385us; 12us; 16386us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 7us; 16387us; 15us; 23us; 27us; 27us; 31us; 25us; 33us; 34us; 48us; 31us; 49us; 32us; 50us; 33us; 9us; 16390us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 8us; 16391us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 48us; 31us; 49us; 32us; 50us; 33us; 12us; 16392us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 6us; 16393us; 15us; 23us; 27us; 27us; 31us; 25us; 33us; 34us; 48us; 31us; 50us; 33us; 5us; 16394us; 15us; 23us; 27us; 27us; 31us; 25us; 33us; 34us; 48us; 31us; 12us; 16395us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 6us; 16406us; 15us; 23us; 27us; 27us; 31us; 25us; 33us; 34us; 48us; 31us; 50us; 33us; 12us; 16407us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 10us; 16411us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 11us; 16412us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 13us; 32768us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 39us; 54us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 13us; 16419us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 37us; 62us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 12us; 16420us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 12us; 16426us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 12us; 16429us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 12us; 16449us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 12us; 16452us; 15us; 23us; 23us; 24us; 27us; 27us; 31us; 25us; 33us; 34us; 45us; 52us; 46us; 29us; 47us; 30us; 48us; 31us; 49us; 32us; 50us; 33us; 55us; 51us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 1us; 16446us; 13us; 95us; 0us; 16388us; 1us; 16446us; 13us; 95us; 0us; 16389us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 0us; 16399us; 0us; 16400us; 0us; 16401us; 0us; 16402us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 0us; 16408us; 0us; 16409us; 3us; 16409us; 27us; 91us; 35us; 16442us; 44us; 16442us; 0us; 16410us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 9us; 16432us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 49us; 56us; 47us; 0us; 16413us; 9us; 16417us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 1us; 32768us; 41us; 57us; 0us; 16414us; 1us; 16415us; 44us; 59us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 0us; 16416us; 0us; 16418us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 1us; 16422us; 53us; 72us; 1us; 32768us; 43us; 65us; 0us; 16421us; 0us; 16423us; 1us; 16424us; 44us; 68us; 1us; 32768us; 53us; 72us; 0us; 16425us; 1us; 32768us; 46us; 71us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 0us; 16427us; 1us; 32768us; 35us; 74us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 0us; 16428us; 1us; 16430us; 44us; 77us; 1us; 32768us; 14us; 86us; 0us; 16431us; 0us; 16433us; 1us; 16434us; 44us; 81us; 1us; 32768us; 53us; 88us; 0us; 16435us; 1us; 16436us; 44us; 84us; 1us; 32768us; 14us; 86us; 0us; 16437us; 1us; 32768us; 53us; 88us; 0us; 16438us; 1us; 16442us; 27us; 91us; 0us; 16439us; 0us; 16443us; 1us; 16446us; 13us; 95us; 0us; 16444us; 1us; 32768us; 0us; 96us; 0us; 16445us; 0us; 16447us; 0us; 16448us; 1us; 32768us; 53us; 105us; 1us; 32768us; 30us; 99us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 1us; 16450us; 44us; 101us; 1us; 32768us; 53us; 105us; 0us; 16451us; 1us; 32768us; 46us; 104us; 9us; 32768us; 32us; 97us; 34us; 46us; 38us; 53us; 40us; 55us; 42us; 63us; 49us; 45us; 52us; 50us; 53us; 48us; 56us; 47us; 0us; 16453us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 10us; 11us; 25us; 26us; 39us; 47us; 57us; 66us; 79us; 86us; 92us; 105us; 112us; 125us; 136us; 148us; 162us; 176us; 189us; 202us; 215us; 228us; 241us; 251us; 261us; 263us; 264us; 266us; 267us; 277us; 287us; 297us; 307us; 317us; 327us; 328us; 329us; 330us; 331us; 332us; 333us; 334us; 335us; 336us; 337us; 347us; 357us; 358us; 359us; 363us; 364us; 374us; 384us; 394us; 395us; 405us; 407us; 408us; 410us; 420us; 421us; 422us; 432us; 434us; 436us; 437us; 438us; 440us; 442us; 443us; 445us; 455us; 456us; 458us; 468us; 469us; 471us; 473us; 474us; 475us; 477us; 479us; 480us; 482us; 484us; 485us; 487us; 488us; 490us; 491us; 492us; 494us; 495us; 497us; 498us; 499us; 500us; 502us; 504us; 514us; 516us; 518us; 519us; 521us; 531us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 1us; 3us; 0us; 1us; 1us; 3us; 3us; 0us; 1us; 1us; 3us; 3us; 1us; 4us; 1us; 1us; 3us; 0us; 1us; 1us; 3us; 1us; 3us; 2us; 2us; 0us; 1us; 0us; 1us; 2us; 2us; 0us; 1us; 1us; 4us; 1us; 3us; 3us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 4us; 5us; 5us; 6us; 7us; 8us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 14us; 14us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 24us; 25us; 26us; 26us; 27us; 27us; 28us; 29us; 30us; 30us; 31us; 32us; 33us; 33us; 34us; 35us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16396us; 16397us; 16398us; 16399us; 16400us; 16401us; 16402us; 16403us; 16404us; 16405us; 65535us; 65535us; 16408us; 16409us; 65535us; 16410us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 16414us; 65535us; 65535us; 16416us; 16418us; 65535us; 65535us; 65535us; 16421us; 16423us; 65535us; 65535us; 16425us; 65535us; 65535us; 16427us; 65535us; 65535us; 16428us; 65535us; 65535us; 16431us; 16433us; 65535us; 65535us; 16435us; 65535us; 65535us; 16437us; 65535us; 16438us; 65535us; 16439us; 16443us; 65535us; 16444us; 65535us; 16445us; 16447us; 16448us; 65535us; 65535us; 65535us; 65535us; 65535us; 16451us; 65535us; 65535us; 16453us; |]
let _fsyacc_reductions ()  =    [| 
# 532 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startparse));
# 541 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                            boilerplate + _1 
                   )
# 83 "Parser.fsy"
                 : string));
# 552 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                       $"{_1}{_2}{_3}" 
                   )
# 86 "Parser.fsy"
                 : 'gentype_expression));
# 565 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                        $"{_1}{_2}{_3}" 
                   )
# 87 "Parser.fsy"
                 : 'gentype_expression));
# 578 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_nullable_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                                    $"{_1}{_2}{_3}" 
                   )
# 88 "Parser.fsy"
                 : 'gentype_expression));
# 591 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_nullable_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                                    $"{_1}{_2}{_3}" 
                   )
# 89 "Parser.fsy"
                 : 'gentype_expression));
# 604 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                       $"{_1}{_2}{_3}" 
                   )
# 90 "Parser.fsy"
                 : 'gentype_expression));
# 617 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                       $"{_1}{_2}{_3}" 
                   )
# 91 "Parser.fsy"
                 : 'gentype_expression));
# 630 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                        $"{_1}{_2}{_3}" 
                   )
# 92 "Parser.fsy"
                 : 'gentype_expression));
# 643 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                                      $"{_1}{_2}{_3}" 
                   )
# 93 "Parser.fsy"
                 : 'gentype_expression));
# 656 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                                             $"{_1}{_2}{_3}" 
                   )
# 94 "Parser.fsy"
                 : 'gentype_expression));
# 669 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                         $"{_1}{_2}{_3}" 
                   )
# 95 "Parser.fsy"
                 : 'gentype_expression));
# 682 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_unary_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                               _1 
                   )
# 96 "Parser.fsy"
                 : 'gentype_expression));
# 693 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_literal_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                 _1 
                   )
# 97 "Parser.fsy"
                 : 'gentype_expression));
# 704 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_identifier_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                    _1 
                   )
# 98 "Parser.fsy"
                 : 'gentype_expression));
# 715 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_invoke_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                _1 
                   )
# 99 "Parser.fsy"
                 : 'gentype_expression));
# 726 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_forward_pipeline_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                          _1 
                   )
# 100 "Parser.fsy"
                 : 'gentype_expression));
# 737 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parenthesized_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                       _1 
                   )
# 101 "Parser.fsy"
                 : 'gentype_expression));
# 748 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_list_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                              _1 
                   )
# 102 "Parser.fsy"
                 : 'gentype_expression));
# 759 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_record_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                _1 
                   )
# 103 "Parser.fsy"
                 : 'gentype_expression));
# 770 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_function_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                  _1 
                   )
# 104 "Parser.fsy"
                 : 'gentype_expression));
# 781 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_let_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                             _1 
                   )
# 105 "Parser.fsy"
                 : 'gentype_expression));
# 792 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                                           $"{_1}{_2}" 
                   )
# 109 "Parser.fsy"
                 : 'gentype_unary_expression));
# 804 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                             $"{_1}{_2}" 
                   )
# 110 "Parser.fsy"
                 : 'gentype_unary_expression));
# 816 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                   _1 
                   )
# 113 "Parser.fsy"
                 : 'gentype_literal_expression));
# 827 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                        _1 
                   )
# 116 "Parser.fsy"
                 : 'gentype_identifier_expression));
# 838 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                                                   $"Usagi_Nakamura.Curry({_1})" 
                   )
# 117 "Parser.fsy"
                 : 'gentype_identifier_expression));
# 849 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                            $"{_1}{_2}({_3})" 
                   )
# 120 "Parser.fsy"
                 : 'gentype_invoke_expression));
# 862 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                                                           $"{_3}({_1})" 
                   )
# 123 "Parser.fsy"
                 : 'gentype_forward_pipeline_expression));
# 875 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                                              $"{_1}{_2}{_3}" 
                   )
# 126 "Parser.fsy"
                 : 'gentype_parenthesized_expression));
# 888 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_item_list_opt in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                                                     "{" + _2 + "}" 
                   )
# 133 "Parser.fsy"
                 : 'gentype_list_expression));
# 901 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_item in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                  _1 
                   )
# 136 "Parser.fsy"
                 : 'gentype_item_list));
# 912 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_item in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_item_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                  $"{_1}{_2}{_3}" 
                   )
# 137 "Parser.fsy"
                 : 'gentype_item_list));
# 925 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                         "" 
                   )
# 140 "Parser.fsy"
                 : 'gentype_item_list_opt));
# 935 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_item_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                       _1 
                   )
# 141 "Parser.fsy"
                 : 'gentype_item_list_opt));
# 946 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                        _1 
                   )
# 144 "Parser.fsy"
                 : 'gentype_item));
# 957 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                          $"{_1}{_2}{_3}" 
                   )
# 145 "Parser.fsy"
                 : 'gentype_item));
# 970 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_field_list_opt in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                                                                           $"{_1}{_2}{_3}" 
                   )
# 152 "Parser.fsy"
                 : 'gentype_record_expression));
# 983 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                         "" 
                   )
# 155 "Parser.fsy"
                 : 'gentype_field_list_opt));
# 993 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                         _1 
                   )
# 156 "Parser.fsy"
                 : 'gentype_field_list_opt));
# 1004 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                    _1 
                   )
# 159 "Parser.fsy"
                 : 'gentype_field_list));
# 1015 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_field_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                                     $"{_1}{_2}{_3}" 
                   )
# 160 "Parser.fsy"
                 : 'gentype_field_list));
# 1028 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_field_name in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                                      $"{_1}{_2}{_3}" 
                   )
# 163 "Parser.fsy"
                 : 'gentype_field));
# 1041 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                        _1 
                   )
# 166 "Parser.fsy"
                 : 'gentype_field_name));
# 1052 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_parameter_list_opt in
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_function_body in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                             $"{_1}{_2}{_3}{_4}" 
                   )
# 174 "Parser.fsy"
                 : 'gentype_function_expression));
# 1066 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                      _1 
                   )
# 177 "Parser.fsy"
                 : 'gentype_function_body));
# 1077 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fixed_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                                  _1 
                   )
# 180 "Parser.fsy"
                 : 'gentype_parameter_list));
# 1088 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fixed_parameter_list in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_optional_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                                                $"{_1}{_2}{_3}" 
                   )
# 181 "Parser.fsy"
                 : 'gentype_parameter_list));
# 1101 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                         "" 
                   )
# 184 "Parser.fsy"
                 : 'gentype_parameter_list_opt));
# 1111 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                                            _1 
                   )
# 185 "Parser.fsy"
                 : 'gentype_parameter_list_opt));
# 1122 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parameter in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "Parser.fsy"
                                       _1 
                   )
# 188 "Parser.fsy"
                 : 'gentype_fixed_parameter_list));
# 1133 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_parameter in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_fixed_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                                                  $"{_1}{_2}{_3}" 
                   )
# 189 "Parser.fsy"
                 : 'gentype_fixed_parameter_list));
# 1146 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optional_parameter in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                                                 _1 
                   )
# 192 "Parser.fsy"
                 : 'gentype_optional_parameter_list));
# 1157 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optional_parameter in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_optional_parameter_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                                                               $"{_1}{_2}{_3}" 
                   )
# 193 "Parser.fsy"
                 : 'gentype_optional_parameter_list));
# 1170 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_parameter in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                                $"{_1}{_2}" 
                   )
# 196 "Parser.fsy"
                 : 'gentype_optional_parameter));
# 1182 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_parameter_type_opt in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "Parser.fsy"
                                                           $"{_1}{_2}" 
                   )
# 199 "Parser.fsy"
                 : 'gentype_parameter));
# 1194 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "Parser.fsy"
                                         "" 
                   )
# 202 "Parser.fsy"
                 : 'gentype_return_type_opt));
# 1204 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_assertion in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                       _1 
                   )
# 203 "Parser.fsy"
                 : 'gentype_return_type_opt));
# 1215 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 206 "Parser.fsy"
                                         "" 
                   )
# 206 "Parser.fsy"
                 : 'gentype_parameter_type_opt));
# 1225 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_assertion in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                       _1 
                   )
# 207 "Parser.fsy"
                 : 'gentype_parameter_type_opt));
# 1236 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_nullable_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 210 "Parser.fsy"
                                                      $"{_1}{_2}" 
                   )
# 210 "Parser.fsy"
                 : 'gentype_assertion));
# 1248 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_nullable_opt in
            let _2 = parseState.GetInput(2) :?> 'gentype_primitive_type in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "Parser.fsy"
                                                         $"{_1}{_2}" 
                   )
# 213 "Parser.fsy"
                 : 'gentype_nullable_primitive_type));
# 1260 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "Parser.fsy"
                                         "" 
                   )
# 216 "Parser.fsy"
                 : 'gentype_nullable_opt));
# 1270 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                                      _1 
                   )
# 217 "Parser.fsy"
                 : 'gentype_nullable_opt));
# 1281 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 220 "Parser.fsy"
                                                                 _1 
                   )
# 220 "Parser.fsy"
                 : 'gentype_primitive_type));
# 1292 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> 'gentype_variable_list in
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "Parser.fsy"
                             $"{_1}{_2}{_3}{_4}" 
                   )
# 228 "Parser.fsy"
                 : 'gentype_let_expression));
# 1306 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                                      _1 
                   )
# 231 "Parser.fsy"
                 : 'gentype_variable_list));
# 1317 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_variable_list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "Parser.fsy"
                                                          $"{_1}{_2}{_3}" 
                   )
# 232 "Parser.fsy"
                 : 'gentype_variable_list));
# 1330 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_variable_name in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "Parser.fsy"
                                                         $"{_1}{_2}{_3}" 
                   )
# 235 "Parser.fsy"
                 : 'gentype_variable));
# 1343 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "Parser.fsy"
                                        _1 
                   )
# 238 "Parser.fsy"
                 : 'gentype_variable_name));
|]
# 1355 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 60;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let parse lexer lexbuf : string =
    engine lexer lexbuf 0 :?> _
